<function>
    <signature name="hookCheck">JMVC.hookCheck(String hookname [, Array params])</signature>
    <description>That function is strictly coupled with the JMVC.hook function, triggering a named hook.</description>
    <params>
        <param name="*hookname">the name of the hook queue that must be executed</param>
        <param name="params">parameters array for the hooked functions; chained, being a queue the first function specified will pass his returning values as parameters for the second function in the queue, an so on. The sample code clarifies.</param>
    </params>
    <returns>the element returned from the last fucntion</returns>
    <status>testing</status>
    <sample>function foo() {&#10;
    return JMVC.hookCheck('myhook', [1,2,3]);&#10;
};&#10;
JMVC.hook({'myhook': function () {&#10;
    var a = Array.prototype.slice.call(arguments, 1);&#10;
    console.debug('inner 1: ', a);&#10;
    return a;&#10;
}}, true);&#10;
//&#10;
// add another function to the hook queue&#10;
JMVC.hook({'myhook': function () {&#10;
    var a = Array.prototype.slice.call(arguments, 1);&#10;
    console.debug('inner 2: ', a);&#10;
    return a;&#10;
}}, true);&#10;
console.debug(foo());</sample>
</function>