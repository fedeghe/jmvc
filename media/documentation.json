{
	"doc":{
		"functions":[{
			"name":"Model",
			"function":[{
				"func":"set(String varname, Mixed value)",
				"description":"Add a variable to the Model registry.",
				"params":{
					"param":[{
						"name":"*varname",
						"desc":"the name of the variable"
					},{
						"name":"*value",
						"desc":" the value for the variable"
					}]
					},
				"returns":"the model instance"
			},{
				"func":"get(String varname)",
				"description":"If exists retrieve a variable from the Model registry.",
				"params":{
					"param":{
						"name":"*varname",
						"desc":"the name of the variable needed"
					}
				},
			"returns":"the variable value if exists or false"
		},{
			"func":"del(String varname)",
			"description":"If exists deletes a variable from the Model registry.",
			"params":{
				"param":{
					"name":"*varname",
					"desc":"the name of the variable to be deleted"
				}
			},
		"returns":"void (undefined)"
	},{
		"func":"reset();",
		"description":"Deletes all variables from the Model registry.",
		"params":{
			"param":{
				"name":"no params",
				"desc":"this function needs no parameters"
			}
		},
	"returns":"void (undefined)"
}]
},{
	"name":"View",
	"function":[{
		"func":"set(String varname, Mixed value);",
		"description":"Add a variable to the View registry.",
		"params":{
			"param":[{
				"name":"*varname",
				"desc":"the name of the variable"
			},{
				"name":"*value",
				"desc":"the value for the variable"
			}]
			},
		"returns":"the View instance"
	},{
		"func":"get(String varname);",
		"description":"If exists retrieve a variable from the View registry.",
		"params":{
			"param":{
				"name":"*varname",
				"desc":"the name of the variable needed"
			}
		},
	"returns":"the variable value if exists or false"
},{
	"func":"del(String varname);",
	"description":"If exists deletes a variable from the View registry.",
	"params":{
		"param":{
			"name":"*varname",
			"desc":"the name of the variable to be deleted"
		}
	},
"returns":"void (undefined)"
},{
	"func":"parse(Model object);",
	"description":"If the view has some $var$ placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.",
	"params":{
		"param":{
			"name":"object",
			"desc":"Is a Model instance which should contain variables that the view will render through placeholders substitution."
		}
	},
"returns":"the View instance (to access the content use .content attribute)"
},{
	"func":"render(Literal pars{Javascript function cback, Array argz, String target})",
	"description":"This is the function intended to be used to render the document or a part of it. You can optionally pass three elements within a literal object.",
	"params":{
		"param":[{
			"name":"cback",
			"desc":"a callback function that will be executed after rendering"
		},{
			"name":"argz",
			"desc":"an array of parameters that will be passed to the callback"
		},{
			"name":"target",
			"desc":"the default target is document.body but if you pass a string containing the id attribute of an element that is in the\n\t\t\t\t\tDOM (set from previous render with the default target) the content will be set in that element."
		}]
		},
	"returns":"the View instance"
},{
	"func":"set_from_url(String vname, String alt)",
	"description":"All extra parameters are automatically added into the Controller register, so if You plan to use one of these values in a view You should do something like:\n\t\t\t\tmyview.set('myvar', this.get('myvar')); and manage fallback values; that function do that for You \n\t\t\t",
	"params":{
		"param":[{
			"name":"*vname",
			"desc":"the name of the variable You plan to be in extra params"
		},{
			"name":"alt",
			"desc":"an alternative String in case vname is not found in extra params (otherwise You'll see `false`)"
		}]
		},
	"returns":"void (undefined)"
}]
},{
	"name":"Controller",
	"function":[{
		"func":"set(String varname, Mixed value); ",
		"description":"Add a variable to the Controller registry.",
		"params":{
			"param":[{
				"name":"*varname",
				"desc":"the name of the variable"
			},{
				"name":"*value",
				"desc":"the value for the variable"
			}]
			},
		"returns":"the controller instance"
	},{
		"func":"get(String varname);",
		"description":"If exists retrieve a variable from the Controller registry.",
		"params":{
			"param":{
				"name":"*varname",
				"desc":"the name of the variable needed"
			}
		},
	"returns":"the variable value if exists or false"
},{
	"func":"del(String varname);",
	"description":"If exists deletes a variable from the Controller registry.",
	"params":{
		"param":{
			"name":"*varname",
			"desc":"the name of the variable to be deleted"
		}
	},
"returns":"void (undefined)"
},{
	"func":"reset();",
	"description":"Deletes all variables from the Controller registry.",
	"params":{
		"param":{
			"name":"no params",
			"desc":"this function needs no parameters"
		}
	},
"returns":"void (undefined)"
},{
	"func":"relocate(uri location, int ms);",
	"description":"Redirects to a specified location.",
	"params":{
		"param":[{
			"name":"*uri",
			"desc":"the location to be redirected to"
		},{
			"name":"*ms",
			"desc":"after how many ms (default is 0)"
		}]
		},
	"returns":"void (undefined)"
},{
	"func":"render(String content, Javascript function callback);",
	"description":"Renders directly something from the controller, optionally invokes a callback at the end.",
	"params":{
		"param":[{
			"name":"*content",
			"desc":"the content to render"
		},{
			"name":"callback",
			"desc":"a function that will be invoked after content is set"
		}]
		},
	"returns":"the Controller instance"
},{
	"func":"require(String extension1, String extension2, ...);",
	"description":"Loads one or more extensions into the JMVC object",
	"params":{
		"param":{
			"name":"*extension1",
			"desc":"the name of the javascript file (must be in extensions folder) to be loaded. That file will use JMVC.extend function (see the `More` section)"
		}
	},
"returns":"void (undefined)"
}]
},{
	"name":"Dom",
	"function":[{
		"func":"JMVC.dom.create(String tag, Literal attrs,String inner)",
		"description":"try to create an html element.",
		"params":{
			"param":[{
				"name":"*tag",
				"desc":"tag to be created"
			},{
				"name":"attrs",
				"desc":"object literal for attributes"
			},{
				"name":"inner",
				"desc":"html content"
			}]
			},
		"returns":"the brand new tag"
	},{
		"func":"JMVC.dom.append(Element where, Element what)",
		"description":"append an element inside another one",
		"params":{
			"param":[{
				"name":"*where",
				"desc":"dom element target"
			},{
				"name":"*what",
				"desc":"dom element to append"
			}]
			},
		"returns":"void"
	},{
		"func":"JMVC.dom.add(Element where, String tag, Literal attrs, String inner)",
		"description":"this is a shortcut that merges create+append",
		"params":{
			"param":[{
				"name":"*where",
				"desc":"dom element target"
			},{
				"name":"*tag",
				"desc":"tag to be created"
			},{
				"name":"attrs",
				"desc":"object literal for attributes"
			},{
				"name":"inner",
				"desc":"html content"
			}]
			},
		"returns":"void (undefined)"
	},{
		"func":"JMVC.dom.html(Element el, String html)",
		"description":"sets or returns the html into an existing element.",
		"params":{
			"param":[{
				"name":"*el",
				"desc":"dom element target"
			},{
				"name":"html",
				"desc":"html to set in target, otherwise gets it"
			}]
			},
		"returns":"void (undefined)"
	}]
	},{
	"name":"Events",
	"function":[{
		"func":"JMVC.events.bind(Element el, String type, Javascript function fun)",
		"description":"binds a callback to an event fired from an element",
		"params":{
			"param":[{
				"name":"*el",
				"desc":"dom element target"
			},{
				"name":"*type",
				"desc":"the event"
			},{
				"name":"*func",
				"desc":"Javascript function callback"
			}]
			},
		"returns":"void (undefined)"
	},{
		"func":"JMVC.events.unbind(Element el, String type)",
		"description":"unbinds an existing binding",
		"params":{
			"param":[{
				"name":"*el",
				"desc":"dom element target"
			},{
				"name":"*type",
				"desc":"the event"
			}]
			},
		"returns":"void (undefined)"
	},{
		"func":"JMVC.events.one(Element el, String type, Javascript function fun)",
		"description":"binds only once a callback to an event fired from an element",
		"params":{
			"param":[{
				"name":"*el",
				"desc":"dom element target"
			},{
				"name":"*type",
				"desc":"the event"
			},{
				"name":"*func",
				"desc":"Javascript function callback"
			}]
			},
		"returns":"void (undefined)"
	},{
		"func":"JMVC.events.ready(Javascript function func)",
		"description":"binds a callback to document load event",
		"params":{
			"param":{
				"name":"*func",
				"desc":"Javascript function callback"
			}
		},
	"returns":"void (undefined)"
}]
},{
	"name":"Head",
	"function":[{
		"func":"JMVC.head.addscript(String src, Boolean parse, Boolean explicit)",
		"description":"Add a script in the head section",
		"params":{
			"param":[{
				"name":"*src",
				"desc":"this can be the url of the script or the script content (you can even use &#123;&#123;myscript name=`hello` ... &#125;&#125; )"
			},{
				"name":"parse",
				"desc":"set true if You mean to use JMVC.vars variables placeholders in the script"
			},{
				"name":"explicit",
				"desc":"set true if You mean to pass the script content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case"
			}]
			},
		"returns":"void (undefined)"
	},{
		"func":"JMVC.head.addstyle(String src, Boolean parse, Boolean explicit)",
		"description":"Add a stylesheet in the head section",
		"params":{
			"param":[{
				"name":"*src",
				"desc":"this can be the url of the stylesheet or the stylesheet content (you can even use &#123;&#123;mystyle color=`#ff33cc` ... &#125;&#125; )"
			},{
				"name":"parse",
				"desc":"set true if You mean to use JMVC.vars variables placeholders in the stylesheet"
			},{
				"name":"explicit",
				"desc":"set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case"
			}]
			},
		"returns":"void (undefined)"
	},{
		"func":"JMVC.head.title(String title)",
		"description":"Gets/sets document title",
		"params":{
			"param":{
				"name":"title",
				"desc":"The string You want to be set as document title"
			}
		},
	"returns":"the title if no param is passed"
}]
},{
	"name":"More",
	"function":{
		"func":"JMVC.extend(String section, Literal extension)",
		"description":"Extends JMVC object with Your methods",
		"params":{
			"param":[{
				"name":"*section",
				"desc":"that parameter is needed to set the namespace under which Your functions will be added toJMVC, if You use `ajax` then all functions in the literal will be callable with JMVC.ajax.my_function(....)"
			},{
				"name":"*extension",
				"desc":"this object literal defines all the functions in your extension (JMVC is in that scope, so You can use it)"
			}]
			},
		"returns":"void (undefined)"
	}
}]
}
}