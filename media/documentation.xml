<?xml version="1.0"?>
<api>
<!--
[MALTA] src/jmvc/_main.xml
-->
<jmvc>
<!--
[MALTA] src/jmvc/code.xml
-->
<function>
    <signature name="code">JMVC.code()</signature>
    <description>Toggles formatted dom in a popup window (standing browser settings allow to do that)</description>
    <params>
        <param name="">no parameters</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>// show the code window&#10;JMVC.code();&#10;</sample>
    <status>complete</status>
    <code>JMVC.code();</code>
</function>
<!--
[MALTA] src/jmvc/console.xml
-->
<function>
    <signature name="console">JMVC.console()</signature>
    <description>Toggles html+css+js+preview console</description>
    <params>
        <param name="">no parameters</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>// show the console &#10;
JMVC.console();&#10;
// and hide it after 6 seconds &#10;
window.setTimeout(function () {&#10;
    JMVC.console();&#10;
}, 6000);</sample>
    <status>complete</status>
    <code>JMVC.console();
        window.setTimeout(function () {
                JMVC.console();
            }, 6000
        );
    </code>
</function>
<!--
[MALTA] src/jmvc/debug.xml
-->
<function>
    <signature name="debug">JMVC.debug([el1 [,el2 ...]])</signature>
    <description>Debugs on console any element passed, degrading to the alert</description>
    <params>
        <param name="el">all parameters to be debugged</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>var arr = [1,2,3,4,5],&#10;
    obj =  {name : "Federico", surname : "Ghedina", say : "WAT"},&#10;
    foo = function (){console.log('foo'); };&#10;&#10;
// open the console before running&#10;
//&#10;
JMVC.debug(arr), JMVC.debug(obj), JMVC.debug(foo);
</sample>
    <status>complete</status>
    <code>
        var arr = [1,2,3,4,5],
            obj =  {
                name : 'Federico',
                surname : 'Ghedina',
                say : 'WAT'
            },
            foo = function (){
                console.log('foo');
            };
        JMVC.debug(arr),
        JMVC.debug(obj),
        JMVC.debug(foo);
    </code>
</function>
<!--
[MALTA] src/jmvc/define.xml
-->
<function>
    <signature name="define">JMVC.define(ns, dep, cb)</signature>
    <description>AMD like function</description>
    <params>
        <param name="ns">Namespace desired for the module (within JMVC)</param>
        <param name="dep">dependencies modules</param>
        <param name="cb">function where dependencies will be injected, must return the module implementation</param>
    </params>
    <returns>the brand new module</returns>
    <sample>/**&#10;
* inject two modules: app/extensions/def/xxx.js&#10;
* and app/extensions/def/yyy.js&#10;
*/&#10;
var t = JMVC.define(&#10;
    'xxx.sss',&#10;
    ['def.xxx', 'def.yyy'],&#10;
    function (x, y) {&#10;
        return {&#10;
            one : function () {&#10;
                console.log(y.getName() + ' extends ' + x.name);&#10;
            }&#10;
        }&#10;
    }&#10;
);&#10;
t.one();&#10;
console.log(t);&#10;
console.log(JMVC.xxx.sss);
</sample>
    <status>complete</status>
    <code>
        var t = JMVC.define('xxx.sss', ['def.xxx', 'def.yyy'], function (x, y) {
            return {
                one : function () {
                    console.log(y.getName() + ' extends ' + x.name);
                }
            }
        });
        t.one();
        console.log(t);
        console.log(JMVC.xxx.sss);
    </code>
</function>
<!--
[MALTA] src/jmvc/del.xml
-->
<function>
    <signature name="del">JMVC.del(String name, Obj storage)</signature>
    <description>Removes a variable from the global JMVC register</description>
    <params>
        <param name="*name">the name of the new variable to be removed</param>
        <param name="storage">meant to be localStorage or sessionStorage</param>
    </params>
    <returns>JMVC</returns>
    <sample>JMVC.set('a', 10);&#10;
console.log(JMVC.get('a'));&#10;
JMVC.del('a');&#10;
console.log(JMVC.get('a'));&#10;
&#10;
JMVC.set('a', 11, localStorage);&#10;
console.log(JMVC.get('a', localStorage));&#10;
JMVC.del('a', localStorage);&#10;
console.log(JMVC.get('a', localStorage));&#10;
&#10;
JMVC.set('a', 12, sessionStorage);&#10;
console.log(JMVC.get('a', sessionStorage));&#10;
JMVC.del('a', sessionStorage);&#10;
console.log(JMVC.get('a', sessionStorage));&#10;
</sample>
    <status>complete</status>
    <testlink>test_api_jmvc_delgetset</testlink>
    <code>
        JMVC.set('a', 10);
        console.log(JMVC.get('a'));
        JMVC.del('a');
        console.log(JMVC.get('a'));
        JMVC.set('a', 11, localStorage);
        console.log(JMVC.get('a', localStorage));
        JMVC.del('a', localStorage);
        console.log(JMVC.get('a', localStorage));
        JMVC.set('a', 12, sessionStorage);
        console.log(JMVC.get('a', sessionStorage));
        JMVC.del('a', sessionStorage);
        console.log(JMVC.get('a', sessionStorage));
    </code>
</function>
<!--
[MALTA] src/jmvc/delegate.xml
-->
<function>
    <signature name="delegate">JMVC.delegate(Function func, Object obj)</signature>
    <description>Get a function with a delegated context</description>
    <params>
        <param name="*func">the function that must be binded to the object</param>
        <param name="*obj">the object where the function must be binded</param>
    </params>
    <returns>the function binded</returns>
    <sample>var y = {type:'literal'},&#10;
    t = JMVC.delegate(function(){alert(this.type);}, y);&#10;
t(); // literal&#10;</sample>
    <status>complete</status>
    <testlink>test_api_jmvc_delegate</testlink>
    <code>
        var y = {type:'literal'},
            t = JMVC.delegate(function(){alert(this.type);}, y);
        t();</code>
</function>
<!--
[MALTA] src/jmvc/each.xml
-->
<function>
    <signature name="each">JMVC.each(obj, fn)</signature>
    <description>
        Loop over an object literal or Array, the callback at each cycle will receive the object and his index.
        As far as the callback has a name, the two `continue` and `break` function are available.
    </description>
    <params>
        <param name="*obj">the object to loop Object literal or Array</param>
        <param name="*fn">the loop callback</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>&#10;
var obj = {&#10;
        name:'Federico',&#10;
        surname : 'Ghedina',&#10;
        says : 'wat'&#10;
    },&#10;
    arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],&#10;
    objAfter = JMVC.each(obj, function (el, i) {&#10;
        console.log(i, el);&#10;
        return i + '-' + el;&#10;
    }),&#10;
    arrAfter = JMVC.each(arr, function f(el, i) {&#10;
        if (i % 2) { //will skip odd indexed elements&#10;
            f.continue();&#10;
        }&#10;
        return i;&#10;
    });&#10;
console.log(obj, objAfter);&#10;
console.log(arr, arrAfter);&#10;</sample>
    <status>complete</status>
    <testlink>test_api_jmvc_each</testlink>
    <code>
        var obj = {
                name:'Federico',
                surname : 'Ghedina',
                says : 'wat'
            },
            arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            objAfter = JMVC.each(obj,
                function (el, i) {
                    console.log(i, el);
                    return i + '-' + el;
                }),
            arrAfter = JMVC.each(arr,
                function f(el, i) {
                    if (i % 2) {
                        f.continue();
                    }
                    return i;
                }
            );
        console.log(obj, objAfter),
        console.log(arr, arrAfter);
    </code>
</function>
<!--
[MALTA] src/jmvc/extend.xml
-->
<function>
    <signature name="extend">JMVC.extend(String section, Literal extension)</signature>
    <description>Extends JMVC object with Your objects</description>
    <params>
        <param name="*section"> that parameter is needed to set the namespace under which Your functions will be added to JMVC; valid values are `foo` or `foo1.foo2.foo3` or even `foo1/foo2/foo3`</param>
        <param name="*extension">this object literal defines all the functions in your extension (JMVC is in that scope, so You can use it)</param>
    </params>
    <returns>void (undefined)</returns>
    <status>complete</status>

    <sample>console.clear();&#10;
JMVC.extend('fooWidget', {&#10;
&#10;
    // if specified, will lock the extension&#10;
    // for any value returned but true&#10;
    initCheck : function () {&#10;
        console.log('init check 1');&#10;
        return true;&#10;
    },&#10;
&#10;
    // if specified, will be executed immediately&#10;
    init : function () {&#10;
        console.log('init fooWidget 1');&#10;
    },&#10;
&#10;
    // ... specify your methods&#10;
    start : function () {&#10;
        console.log('doing foo 1');&#10;
    }&#10;
    // ...&#10;
});&#10;

&#10;
// or in module mode&#10;
// with the module as second parameter&#10;
//&#10;
JMVC.extend('fooWidget2', function () {&#10;
    //&#10;
    // private code here&#10;
    // &#10;
    return {&#10;
        initCheck : function () {&#10;
            console.log('init check 2');&#10;
            return false; //that will lock the extension&#10;
        },&#10;
        init : function () {&#10;
            console.log('init fooWidget 2');&#10;
        },&#10;
        start : function () {&#10;
            console.log('doing foo 2');&#10;
        }&#10;
    }&#10;
});&#10;
JMVC.fooWidget.start();&#10;
JMVC.fooWidget2.start();    // that will throw a TypeError&#10;
                            // given the initCheck returned value
    </sample>

    <testlink>test_api_jmvc_extend</testlink>
    <code>
        JMVC.extend('fooWidget', {
            initCheck : function () {
                console.log('init check');
                return true;
            },
            init : function () {
                console.log('init fooWidget');
            },
            start : function () {
                console.log('doing foo');
            }
        });
        JMVC.extend('fooWidget2', function () {
            return {
                initCheck : function () {
                    console.log('init check 2');
                    return false;
                },
                init : function () {
                    console.log('init fooWidget 2');
                },
                start : function () {
                    console.log('doing foo 2');
                }
            };
        });
        JMVC.fooWidget.start();
        JMVC.fooWidget2.start();
    </code>
</function>
<!--
[MALTA] src/jmvc/factory.xml
-->
<function>
    <signature name="factory">JMVC.factory(String type, String name[, Array params])</signature>
    <description>Get a Model, View or Interface</description>
    <params>
        <param name="*type">specify the kind of object should be returned, accepted values area 'view', 'model', 'controller' and 'interface'</param>
        <param name="*name">the name for the object, that will be used in the xhr path. Will be searched in the Models dir, so is possible to use a relative path as objects/person to get the model within the /app/models/objects/person.js file</param>
        <param name="params">all parameters for the object constructor call</param>
    </params>
    <returns>the requested instance, or false</returns>
    <status>testing</status>
    <sample>var me = JMVC.factory('model', 'Persona', ['Fred', 35]),&#10;
    you = JMVC.factory('model', 'Persona', ['Jenny', 23]);&#10;
console.log(me.hello());&#10;
console.log(you.hello());</sample>
    <code>
        var me = JMVC.factory('model', 'Persona', ['Fred', 35]),
            you = JMVC.factory('model', 'Persona', ['Jenny', 23]);
        console.log(me.hello());
        console.log(you.hello());
    </code>
</function>
<!--
[MALTA] src/jmvc/get.xml
-->
<function>
    <signature name="get">JMVC.get(String name, Obj storage)</signature>
    <description>Retrieves a variable from the global JMVC scope</description>
    <params>
        <param name="*name">the name of the new variable to be retrieved</param>
        <param name="storage">meant to be localStorage or sessionStorage</param>
    </params>
    <returns>the variable reference or value if found, or undefined</returns>
    <sample>JMVC.set('a', 10);&#10;
console.log(JMVC.get('a'));&#10;
JMVC.del('a');&#10;
console.log(JMVC.get('a'));&#10;
&#10;
JMVC.set('a', 11, localStorage);&#10;
console.log(JMVC.get('a', localStorage));&#10;
JMVC.del('a', localStorage);&#10;
console.log(JMVC.get('a', localStorage));&#10;
&#10;
JMVC.set('a', 12, sessionStorage);&#10;
console.log(JMVC.get('a', sessionStorage));&#10;
JMVC.del('a', sessionStorage);&#10;
console.log(JMVC.get('a', sessionStorage));&#10;
</sample>
    <status>testing</status>
    <testlink>test_api_jmvc_delgetset</testlink>
    <code>
        JMVC.set('a', 10);
        console.log(JMVC.get('a'));
        JMVC.del('a');
        console.log(JMVC.get('a'));
        JMVC.set('a', 11, localStorage);
        console.log(JMVC.get('a', localStorage));
        JMVC.del('a', localStorage);
        console.log(JMVC.get('a', localStorage));
        JMVC.set('a', 12, sessionStorage);
        console.log(JMVC.get('a', sessionStorage));
        JMVC.del('a', sessionStorage);
        console.log(JMVC.get('a', sessionStorage));
    </code>
</function>
<!--
[MALTA] src/jmvc/getModel.xml
-->
<function>
    <signature name="getModel">JMVC.getModel(String name [, Array params])</signature>
    <description>This is a shortcut call for JMVC.factory, with the first parameter preset to 'model'</description>
    <params>
        <param name="*name">the name of the model that should be returned, even on a subfolder</param>
        <param name="params">all parameters for the object constructor call</param>
    </params>
    <returns>the model instance, or false</returns>
    <status>testing</status>
    <sample>var me = JMVC.getModel('Persona', ['Federico', 35]),&#10;
    you = JMVC.getModel('Persona', ['Frances', 4]);&#10;
console.log(me.hello());&#10;
console.log(you.hello());</sample>
    <code>
        var me = JMVC.getModel('Persona', ['Federico', 35]),
            you = JMVC.getModel('Persona', ['Frances', 4]);
        console.log(me.hello());
        console.log(you.hello());
    </code>
</function>
<!--
[MALTA] src/jmvc/getView.xml
-->
<function>
    <signature name="getView">JMVC.getView(String name)</signature>
    <description>This is a shortcut call for JMVC.factory, with the first parameter preset to 'view'</description>
    <params>
        <param name="*name">the name of the new view, the view file must be app/views{name}.html where `name` can contain subpaths like 'container/main/foot'</param>
    </params>
    <returns>the view instance or false</returns>
    <status>testing</status>
    <sample>var me = JMVC.getView('foot');&#10;
        console.dir(me);&#10;
        console.log(me.content);</sample>
    <code>
        var me = JMVC.getView('foot');
        console.dir(me);
        console.log(me.content);
    </code>
</function>
<!--
[MALTA] src/jmvc/hook.xml
-->
<function>
    <signature name="hook">JMVC.hook(ObjLit hooks [, boolean force])</signature>
    <description>That function allows to add a function to four inner predefined hook queues; it is possible to define through that method even new hooks and trigger execution anywhere in your code using the function hookCheck.
        Note that 'onBeforeRender', 'onAfterRender', 'onBeforeParse', 'onAfterParse' are existent inner hooks used at parse and render time.</description>
    <params>
        <param name="*hooks">the object literal containing hooked functions</param>
        <param name="force">hook the function even if the hook is not in the expected set ['onBeforeRender', 'onAfterRender', 'onBeforeParse', 'onAfterParse']</param>
    </params>
    <returns>void (undefined)</returns>
    <status>testing</status>
    <sample>// INNER HOOK&#10;
JMVC.hook({&#10;
    'onAfterRender': function () {&#10;
        console.log('You`ll never see that message booking that function from the console!!!');&#10;
    }&#10;
});&#10;
&#10;
// USER DEFINED HOOK&#10;
function foo() {&#10;
    JMVC.hookCheck('myhook', [1, 2, 3, 4, 5, 6]);&#10;
};&#10;
JMVC.hook({&#10;
    'myhook': function () {&#10;
        var sum = 0;&#10;
        JMVC.each(&#10;
            JMVC.array.fromArguments(arguments),&#10;
            function (o, i) {&#10;
                sum += o;&#10;
            }&#10;
        );&#10;
        console.log(sum);&#10;
        console.log(arguments);&#10;
    }&#10;
}, true);&#10;
foo();</sample>
    <code>
        JMVC.hook({
            onAfterRender: function () {
                console.log('You`ll never see that message booking that function from the console!!!');
            }
        });
        function foo() {
            JMVC.hookCheck('myhook', [1, 2, 3, 4, 5 ,6]);
        };
        JMVC.hook({
            myhook: function () {
                var sum = 0;
                JMVC.each(
                    JMVC.array.fromArguments(arguments),
                    function (o, i) {
                        sum += o;
                    }
                );
                console.log(sum);
                console.log(arguments);
            }}, true);
        foo();</code>
</function>
<!--
[MALTA] src/jmvc/hookCheck.xml
-->
<function>
    <signature name="hookCheck">JMVC.hookCheck(String hookname [, Array params])</signature>
    <description>That function is strictly coupled with the JMVC.hook function, triggering a named hook.</description>
    <params>
        <param name="*hookname">the name of the hook queue that must be executed</param>
        <param name="params">parameters array for the hooked functions; chained, being a queue the first function specified will pass his returning values as parameters for the second function in the queue, an so on. The sample code clarifies.</param>
    </params>
    <returns>the element returned from the last fucntion</returns>
    <status>testing</status>
    <sample>function foo() {&#10;
    return JMVC.hookCheck('myhook', [1,2,3]);&#10;
};&#10;
JMVC.hook({'myhook': function () {&#10;
    var a = Array.prototype.slice.call(arguments, 1);&#10;
    console.log('inner 1: ', a);&#10;
    return a;&#10;
}}, true);&#10;
//&#10;
// add another function to the hook queue&#10;
JMVC.hook({'myhook': function () {&#10;
    var a = Array.prototype.slice.call(arguments, 1);&#10;
    console.log('inner 2: ', a);&#10;
    return a;&#10;
}}, true);&#10;
console.log(foo());</sample>
    <code>
        function foo() {
            return JMVC.hookCheck('myhook', [1,2,3]);
        };
        JMVC.hook({'myhook': function () {
            var a = Array.prototype.slice.call(arguments, 1);
            console.log('inner 1: ', a);
            return a;
        }}, true);
        JMVC.hook({'myhook': function () {
            var a = Array.prototype.slice.call(arguments, 1);
            console.log('inner 2: ', a);
            return a;
        }}, true);
        console.log(foo());
    </code>
</function>
<!--
[MALTA] src/jmvc/htmlChars.xml
-->
<function>
    <signature name="htmlChars">JMVC.htmlChars(String str)</signature>
    <description>Gets a view instance, even on a subfolder</description>
    <params>
        <param name="*str">the string that must be changed</param>
    </params>
    <returns>the string with substituted char</returns>
    <status>complete</status>
    <sample>console.log(&#10;
    JMVC.htmlChars(document.documentElement.innerHTML)&#10;
    .substring(0,500)&#10;
);</sample>
    <code>console.log(JMVC.htmlChars(document.documentElement.innerHTML).substring(0,500));</code>
</function>
<!--
[MALTA] src/jmvc/htmlCharsDecode.xml
-->
<function>
    <signature name="htmlCharsDecode">JMVC.htmlCharsDecode(String str)</signature>
    <description>Gets a view instance, even on a subfolder</description>
    <params>
        <param name="*str">the string that must be changed</param>
    </params>
    <returns>the string with substituted char</returns>
    <status>complete</status>
    <sample>var coded = JMVC.htmlChars(&#10;
    document.documentElement.innerHTML&#10;
).substring(0, 506);&#10;
JMVC.debug('coded: ' + coded);&#10;
JMVC.debug('decoded: ' + JMVC.htmlCharsDecode(coded));</sample>
    <code>
    	var coded = JMVC.htmlChars(document.documentElement.innerHTML).substring(0, 506);
    	JMVC.debug('coded: ' + coded);
    	JMVC.debug('decoded: ' + JMVC.htmlCharsDecode(coded));
    </code>
</function>
<!--
[MALTA] src/jmvc/implement.xml
-->
<function>
    <signature name="implement">JMVC.implement(Object o, Array interf)</signature>
    <description>Gets a model instance, even on a subfolder</description>
    <params>
        <param name="*o">the Object to check</param>
        <param name="*interf">an array of target functions that caracterize the interface</param>
    </params>
    <returns>boolean</returns>
    <status>complete</status>
    <testlink>test_api_jmvc_implement</testlink>
</function>
<!--
[MALTA] src/jmvc/inherit.xml
-->
<function>
    <signature name="inherit">JMVC.inherit(Object child, Object parent)</signature>
    <description>Implements a true inheritance (D.C. way if you prefer)</description>
    <params>
        <param name="*child">the child object that must inherit</param>
        <param name="*parent">the parent object that will share his prototype with the `foo middle object`</param>
    </params>
    <returns>void (undefined)</returns>
    <status>complete</status>
    <sample>var Person = function (name, age) {&#10;
        this.name = name;&#10;
        this.age = age;&#10;
    },&#10;
    Parent = function (){},&#10;
    Child = function (name) {&#10;
        this.name = name;&#10;
    };&#10;
Person.prototype.getName = function () {&#10;
    console.log('my name is '+ this.name);&#10;
};&#10;
JMVC.inherit(Child, Parent, Person);&#10;
&#10;
var c = new Child('Gabriele');&#10;
c.getName();</sample>
    <code>var Person = function (name, age) {
    this.name = name;
    this.age = age;
  },
  Parent = function (){},
  Child = function (name) {
    this.name = name;
  };
Person.prototype.getName = function () {
  console.log('my name is '+ this.name);
};
JMVC.inherit(Child, Parent, Person);

var c = new Child('Gabriele');
c.getName();</code>
    <testlink>test_api_jmvc_inherit</testlink>
</function>
<!--
[MALTA] src/jmvc/jeval.xml
-->
<function>
    <signature name="jeval">JMVC.jeval(String code)</signature>
    <description>A stupid wrappper around eval function</description>
    <params>
        <param name="*code">the code to be evaluated</param>
    </params>
    <returns>what is returned by code evaluation</returns>
    <status>incomplete</status>
    <sample>JMVC.jeval('var t = "evaluated";');&#10;
        console.log(t);
    </sample>
    <code>
        JMVC.jeval('var t = \'evaluated\';');
        console.log(t);
    </code>
</function>
<!--
[MALTA] src/jmvc/lang.xml
-->
<function>
    <signature name="lang">JMVC.lang(String name, ...)</signature>
    <description>As far as `core/i18n/i18n` is loaded with JMVC.require an `onBeforeRender` hook queues a call to the JMVC.parseLang which will look and replace lang placeholders. The JMVC.lang function add one or more language file to the set of files that can be used.</description>
    <params>
        <param name="*name">the name of the lang file</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
    <sample>JMVC.require('core/i18n/i18n');&#10;
var t  = JMVC.lang('it', 'en');&#10;
// now if the rendered content contains language placeholders, they will&#10;
// be replaced with the active language (cookie or get)&#10;</sample>
</function>
<!--
[MALTA] src/jmvc/loadInterfaces.xml
-->
<function>
    <signature name="loadInterfaces">JMVC.loadInterfaces(String name)</signature>
    <description>This is a shortcut call for the factory, with the first parameter preset to 'interface'</description>
    <params>
        <param name="*name">the name of the interface that must be loaded</param>
    </params>
    <returns>void (undefined)</returns>
    <status>testing</status>
    <sample>var me = JMVC.loadInterfaces('loader')</sample>
</function>
<!--
[MALTA] src/jmvc/nsCheck.xml
-->
<function>
    <signature name="nsCheck">JMVC.nsCheck(String ns [,Object ctx])</signature>
    <description>Returns a namespace if exists</description>
    <params>
        <param name="*ns">The namespace to check, a String dot glued</param>
        <param name="ctx" default="Window">The root namespace</param>
    </params>
    <returns>namespace || false</returns>
    <sample>&#10;
var loaded_extensions = JMVC.nsCheck('extensions', JMVC),&#10;
    // or&#10; 
    loadedExtensions =  JMVC.nsCheck('JMVC.extensions'),&#10;
    foo = JMVC.nsCheck('foo', JMVC); //false</sample>
    <status>complete</status>
    <testlink>test_api_jmvc_checkns</testlink>
</function>
<!--
[MALTA] src/jmvc/nsMake.xml
-->
<function>
    <signature name="nsMake">JMVC.nsMake(String str, Literal obj, var ctx)</signature>
    <description>Creates a namspace</description>
    <params>
        <param name="*str">Dot separated wished namespace</param>
        <param name="obj" default="{}">The inner object of the namespace</param>
        <param name="ctx" default="window">The root for the namespace</param>
    </params>
    <returns>the brand new ns</returns>
    <status>incomplete</status>
    <sample>JMVC.nsMake('y.d',{name:'Fred'}, JMVC);&#10;
        console.log(JMVC.y.d.name);&#10;//&#10;
JMVC.nsMake('y.d');&#10;
console.log(y.d);</sample>
    <code>
        JMVC.nsMake('y.d',{name:'Fred'}, JMVC);
        console.log(JMVC.y.d.name);
        JMVC.nsMake('y.d');
        console.log(y.d);
    </code>
</function>
<!--
[MALTA] src/jmvc/parseLang.xml
-->
<function>
    <signature name="parseLang">JMVC.parseLang(String cnt)</signature>
    <description>Parses cnt looking for language placeholders matching format [L[label]] and replacing them with the current (or default) language translation given in the app/i18n/XX.js lang file. That function is not mean to be called manually, it will be called by JMVC as a `onBeforeRender` hook as far as 'core/i18n' is required</description>
    <params>
        <param name="*cnt">the content to be parsed</param>
    </params>
    <returns>the parsed content</returns>
    <status>incomplete</status>
    <sample>var txt = "[L[ciao]] Federico, [L[come stai]]?";&#10;
&#10;
// default lang is en, and app/i18n/en.js&#10;
// contains all translations&#10;
console.log(JMVC.parseLang(txt));&#10;
&#10;
// but You cen pick any language you provided&#10;
// es: app/i18n/en.js&#10;
JMVC.cookie.set("lang", "it");&#10;
console.log(JMVC.parseLang(txt));&#10;
JMVC.cookie.set("lang", "de");&#10;
console.log(JMVC.parseLang(txt));&#10;
JMVC.cookie.set("lang", "jp");&#10;
console.log(JMVC.parseLang(txt));&#10;
&#10;
// back to eng&#10;
JMVC.cookie.set("lang", "en");&#10;
console.log(JMVC.parseLang(txt));&#10;</sample>
    <code>
        var txt = '[L[ciao]] Federico, [L[come stai]]?';
        console.log(JMVC.parseLang(txt));
        JMVC.cookie.set('lang', 'it');
        console.log(JMVC.parseLang(txt));
        JMVC.cookie.set('lang', 'de');
        console.log(JMVC.parseLang(txt));
        JMVC.cookie.set('lang', 'jp');
        console.log(JMVC.parseLang(txt));
        JMVC.cookie.set('lang', 'en');
        console.log(JMVC.parseLang(txt));
    </code>
</function>
<!--
[MALTA] src/jmvc/preload.xml
-->
<function>
    <signature name="preload">JMVC.preload(String url)</signature>
    <description>Appends a 1px square iframe to the body, loading the specified url (from the same origin), and removes it as far as the content is loaded. That will speed up dramatically the loading time of the page pointed by the url</description>
    <params>
        <param name="*url">the url that must be loaded</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
    <sample>//open console and execute&#10;
console.clear();&#10;
JMVC.preload(JMVC.vars.baseurl + '/demo');</sample>
</function>
<!--
[MALTA] src/jmvc/prototipize.xml
-->
<function>
    <signature name="prototipize">JMVC.prototipize(Constructor func, Enanching Literal)</signature>
    <description>Allows to add properties and methods to the prototype of a constructor</description>
    <params>
        <param name="*unc">the constructor to be enanched</param>
        <param name="*name">the literal object that contains wanted properties and methods</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
    <sample>function Complex(re, im) {&#10;
    this._re = re;&#10;
    this._im = im;&#10;
    this._rho = Math.sqrt(re * re + im * im, 2);&#10;
    this._theta = Math.atan2(im, re);&#10;
    this._mod = null;&#10;
    this.toString = function (){&#10;
        return this._re +&#10;
            (this._im >= 0 ? ' + ' : ' - ') +&#10;
            Math.abs(this._im) +'i';&#10;
    }&#10;
};&#10;
JMVC.prototipize(Complex, {&#10;
    'mod' : function () {&#10;
        this._mod = Math.sqrt(&#10;
            this._re * this._re +&#10;
            this._im * this._im&#10;
        );&#10;
        return this._mod;&#10;
    },&#10;
    'add' : function (cplx) {&#10;
        return new Complex(&#10;
            this._re + cplx._re,&#10;
            this._im + cplx._im&#10;
        );&#10;
    }&#10;
});&#10;
var c1 = new Complex(3, 4),&#10;
    c2 = new Complex(7, 2);&#10;
console.log(c1.mod());&#10;
console.log(c1.add(c2) + '');&#10;</sample>
</function>
<!--
[MALTA] src/jmvc/purge.xml
-->
<function>
    <signature name="purge">JMVC.purge(obj Literal)</signature>
    <description>Nullifies tha object passed as parameter</description>
    <params>
        <param name="*obj">the literal</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
    <sample>var t = {name:'Jhon', surname:'foo'};&#10;
console.log(t);&#10;
JMVC.purge(t);&#10;
console.log(t);</sample>
    <code>
        var t = {name:'Jhon', surname:'foo'};
        console.log(t);
        JMVC.purge(t);
        console.log(t);
    </code>
</function>
<!--
[MALTA] src/jmvc/require.xml
-->
<function>
    <signature name="require">JMVC.require(String extension1, String extension2, ...)</signature>
    <description>Loads one or more extensions into the JMVC object</description>
    <params>
        <param name="*extension1">the name of the javascript file (must be in extensions folder) to be loaded. That file will use JMVC.extend function (see the `More` section)</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
    <sample>JMVC.require('animator','tricks');&#10;
JMVC.tricks.makeEditable();&#10;
console.debug('Now try to edit the document');</sample>
</function>
<!--
[MALTA] src/jmvc/set.xml
-->
<function>
    <signature name="set">JMVC.set(String name, String value, Obj storage)</signature>
    <description>Adds a variable that You can use anywhere</description>
    <params>
        <param name="*name">the name of the new variable, use it typing &#36;thename&#36;</param>
        <param name="*value">the value of the variable</param>
        <param name="storage">meant to be localStorage or sessionStorage</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>JMVC.set('a', 10);&#10;
console.log(JMVC.get('a'));&#10;
JMVC.del('a');&#10;
console.log(JMVC.get('a'));&#10;
&#10;
JMVC.set('a', 11, localStorage);&#10;
console.log(JMVC.get('a', localStorage));&#10;
JMVC.del('a', localStorage);&#10;
console.log(JMVC.get('a', localStorage));&#10;
&#10;
JMVC.set('a', 12, sessionStorage);&#10;
console.log(JMVC.get('a', sessionStorage));&#10;
JMVC.del('a', sessionStorage);&#10;
console.log(JMVC.get('a', sessionStorage));&#10;
</sample>
    <status>testing</status>
    <testlink>test_api_jmvc_delgetset</testlink>
    <code>
        JMVC.set('a', 10);
        console.log(JMVC.get('a'));
        JMVC.del('a');
        console.log(JMVC.get('a'));
        JMVC.set('a', 11, localStorage);
        console.log(JMVC.get('a', localStorage));
        JMVC.del('a', localStorage);
        console.log(JMVC.get('a', localStorage));
        JMVC.set('a', 12, sessionStorage);
        console.log(JMVC.get('a', sessionStorage));
        JMVC.del('a', sessionStorage);
        console.log(JMVC.get('a', sessionStorage));
    </code>
</function>
    <param>
        <name>W</name>
        <type>reference</type>
        <description>JMVC.W is a reference to the current window object</description>
    </param>
</jmvc>
<!--
[MALTA] src/_constructors/_main.xml
-->
<constructors>
<!--
[MALTA] src/_constructors/Channel.xml
-->
<function>
    <signature name="Channel">JMVC.Channel(String name)</signature>
    <description>This is a factory method to obtain an observer named channel.</description>
    <params>
        <param name="*name">The name of the channel that must be created/retrieved</param>
    </params>
    <returns>
        <description>the brand new object, enable, disable, pub, sub, unsub, once, reset</description>
        <properties></properties>
        <functions>
            <function>
                <signature>enable()</signature>
                <description>Enables the channel</description>
            </function>
            <function>
                <signature>disable()</signature>
                <description>Disables the channel</description>
            </function>
            <function>
                <signature>pub(String topic, Array args)</signature>
                <description></description>
            </function>
            <function>
                <signature>sub(String topic, function cb, boolean force)</signature>
                <description></description>
            </function>
            <function>
                <signature>unsub(String topic, function cb)</signature>
                <description></description>
            </function>
            <function>
                <signature>once(String topic, function cb)</signature>
                <description></description>
            </function>
            <function>
                <signature>reset([topic1 [, topic2[, ...]]])</signature>
                <description></description>
            </function>
        </functions>
    </returns>
    <sample>var c = JMVC.Channel('trial');&#10;
c.sub('notice', function (a, b, c) {&#10;
    console.log('first notice');&#10;
    console.log(a, b, c);&#10;
});&#10;
c.pub('notice', ['hello','world']);</sample>
    <status>incomplete</status>
    <code>var c = JMVC.Channel('trial');
c.sub('notice', function (a, b, c) {
    console.log('first notice');
    console.log(a, b, c);
});
c.pub('notice', ['hello','world'])</code>
</function>
<!--
[MALTA] src/_constructors/Event.xml
-->
<function>
    <signature name="Event">JMVC.Event.create(sender)</signature>
    <description>Event is a special constructor to get an Event object with an attach and notify method</description>
    <params>
        <param name="*sender">The sender object</param>
    </params>
    <returns>the breand new object</returns>
    <sample>&#10;
var list = {&#10;
    els : [],&#10;
    add : function (i) {&#10;
        this.els.push(i) &amp;&amp;&#10;
        this.addedItem.notify({item : i});&#10;
    },&#10;
    del : function (i) {&#10;
        this.els.splice(i, 1) &amp;&amp;&#10;
        this.deletedItem.notify({index : i});&#10;
    }&#10;
};&#10;
&#10;
// now use Event&#10;
//&#10;
list.addedItem = JMVC.Event.create(list)&#10;
    .attach(function () {&#10;
        console.log(arguments);&#10;
    });&#10;
list.deletedItem = JMVC.Event.create(list)&#10;
    .attach(function () {&#10;
        console.log(arguments);&#10;
    });&#10;
&#10;
list.add('a');&#10;
list.add('b');&#10;
list.add('c');&#10;
list.del(1);&#10;
console.log(list.els);</sample>
    <code>
var list = {
    els : [],
    add : function (i) {
        if(this.els.push(i)) this.addedItem.notify({item : i});
    },
    del : function (i) {
        if (this.els.splice(i, 1)) this.deletedItem.notify({index : i});
    }
};
list.addedItem = JMVC.Event.create(list).attach(function () {console.log(arguments)});
list.deletedItem = JMVC.Event.create(list).attach(function () {console.log(arguments)});

list.add('a');
list.add('b');
list.add('c');
list.del(1);
console.log(list.els);
    </code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/_constructors/Interface.xml
-->
<function>
    <signature name="Interface">JMVC.Interface.create(String name, [Strings] methods)</signature>
    <description>Create an interface object</description>
    <params>
        <param name="*name">the name for the interface (used in case of error)</param>
        <param name="*methods">an array of strings</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/_constructors/Promise.xml
-->
<function>
    <signature name="Promise">JMVC.Promise.create()</signature>
    <description>JMVC.Promise offers a generator called `create` and two static functions: `chain` and `join`.
    You can claim You`ve honoured Your Promise calling the done/solve method on it passing all the arguments needed,
    on the other hand You can use may times the then function passing a callback that will receive as first parameter the promise itself,
    and as second paramter the array of what`s passed when calling done/solve. Chain and Join are some useful function to concatenate and join many calls.
    </description>
    <params>
        <param name="">no parameters</param>
    </params>
    <returns>the Promise object</returns>
    <testlink>test_api_constructors_promise</testlink>
    <status>incomplete</status>
    <sample>(function () {&#10;
    var p = JMVC.Promise.create();&#10;
    window.setTimeout(function() {&#10;
        console.log('1 done');&#10;
        p.done(0, 1, 2, 3, 4);&#10;
    }, 500);&#10;
    return p;&#10;
})().then(function(p, r) {&#10;
    console.log(r);&#10;
    var self = this;&#10;
    window.setTimeout(function() {&#10;
        console.log('2 done');&#10;
        self.done(5, 6, 7, 8, 9);&#10;
    }, 500);&#10;
}).then(function(p, r) {&#10;
    console.log(r);&#10;
    var self = this;&#10;
    window.setTimeout(function() {&#10;
        self.done(3);&#10;
    }, 500);&#10;
}).then(startJoin).then(startChain);&#10;
function startJoin(pr) {&#10;
    var t1 = 10,&#10;
        t2 = 1000;&#10;
    console.log('------ join started ------');&#10;
    console.log('> will require max(' + t1 + ', ' + t2 + ') ms');&#10;
    return JMVC.Promise.join([&#10;
        function(p, a) {&#10;
            console.log('first receive params: ', a);&#10;
            window.setTimeout(function() {&#10;
                p.done('a', 'b', 'c');&#10;
            }, t1);&#10;
        },&#10;
        function(p, a) {&#10;
            console.log('second receive params: ', a);&#10;
            window.setTimeout(function() {&#10;
                p.done('d', 'e', 'f');&#10;
            }, t2);&#10;
        }&#10;
    ], [2, 3, 4]).then(function(p, r) {&#10;
        console.log('Join result : ', r);&#10;
        p.done();&#10;
        pr.done();&#10;
    })&#10;
}&#10;
function startChain(pr) {&#10;
    console.log('------ chain started ------');&#10;
    JMVC.Promise.chain([&#10;
        function(p, r) {&#10;
            console.log('res one ', r);&#10;
            window.setTimeout(function() {&#10;
                p.done(r[0]);&#10;
            }, 500);&#10;
        },&#10;
        function(p, r) {&#10;
            console.log('res two ', r);&#10;
            window.setTimeout(function() {&#10;
                p.done(r[0] + r[0]);&#10;
            }, 500);&#10;
        },&#10;
        function(p, r) {&#10;
            console.log('res three ', r);&#10;
            window.setTimeout(function() {&#10;
                p.done(r[0] + r[0] + r[0]);&#10;
            }, 500);&#10;
        },&#10;
        function(p, r) {&#10;
            console.log('last ', r);&#10;
            this.done(r[0]);&#10;
        }&#10;
    ], [1, 2, 3]).then(&#10;
        function(p, r) {&#10;
            console.log('the end ', r[0]);&#10;
            this.done(r[0]);&#10;
            pr.done(r[0]);&#10;
            console.log(this);&#10;
            console.log(pr);&#10;
        }&#10;
    );&#10;
}</sample>
    <code>(function() {
    var p = JMVC.Promise.create();
    window.setTimeout(function() {
        console.log('1 done');
        p.done(0, 1, 2, 3, 4);
    }, 500);
    return p;
})().then(function(p, r) {
    console.log(r);
    
    var self = this;
    window.setTimeout(function() {
        console.log('2 done');
        self.done(5, 6, 7, 8, 9);
    }, 500);
}).then(function(p, r) {
    console.log(r);
    
    var self = this;
    window.setTimeout(function() {

        self.done(3);
    }, 500);
}).then(startJoin).then(startChain);
function startJoin(pr) {
    var t1 = 10,
        t2 = 1000;
    console.log('------ join started ------');
    console.log('> will require max(' + t1 + ', ' + t2 + ') ms');

    return JMVC.Promise.join([
        function(p, a) {
            console.log('first receive params: ', a);
            window.setTimeout(function() {
                
                p.done('a', 'b', 'c');
            }, t1);
        },
        function(p, a) {
            console.log('second receive params: ', a);
            window.setTimeout(function() {
                p.done('d', 'e', 'f');
            }, t2);
        }
    ], [2, 3, 4]).then(function(p, r) {
        console.log('Join result : ', r);
        p.done();
        pr.done();
    })
}
function startChain(pr) {
    console.log('------ chain started ------');
    JMVC.Promise.chain([
        function(p, r) {

            console.log('res one ', r);
            window.setTimeout(function() {
                p.done(r[0]);
            }, 500);
        },
        function(p, r) {
            console.log('res two ', r);
            window.setTimeout(function() {
                p.done(r[0] + r[0]);
            }, 500);
        },
        function(p, r) {
            console.log('res three ', r);
            window.setTimeout(function() {
                p.done(r[0] + r[0] + r[0]);
            }, 500);
        },
        function(p, r) {
            console.log('last ', r);
            this.done(r[0]);
        }
    ], [1, 2, 3]).then(
        function(p, r) {
            console.log('the end ', r[0]);
            this.done(r[0]);
            pr.done(r[0]);
            console.log(this);
            console.log(pr);
        }
    );
}</code>
</function>
</constructors>    
<!--
[MALTA] src/errors/_main.xml
-->
<errors>
<!--
[MALTA] src/errors/ActionNotFound.xml
-->
<function>
    <signature name="ActionNotFound">JMVC.Promise(String name)</signature>
    <description>Retrieves a variable from the global JMVC scope</description>
    <params>
        <param name="*name">the name of the new variable to be removed</param>
    </params>
    <returns>the variable reference or value</returns>
    <status>incomplete</status>
    <sample>function t(){&#10;
var p = JMVC.Promise.create();&#10;
window.setTimeout(function () {&#10;
    console.log('uan');&#10;
    p.done();&#10;
}, 2000);&#10;
return p;&#10;
};&#10;
t()&#10;
.then(function(){console.log('two');})&#10;
.then(function(){console.log('tree');});</sample>
</function>
<!--
[MALTA] src/errors/BadImplement.xml
-->
<function>
    <signature name="BadImplement">JMVC.Promise(String name)</signature>
    <description>Retrieves a variable from the global JMVC scope</description>
    <params>
        <param name="*name">the name of the new variable to be removed</param>
    </params>
    <returns>the variable reference or value</returns>
    <status>incomplete</status>
    <sample>function t(){&#10;
var p = JMVC.Promise();&#10;
window.setTimeout(function () {&#10;
    console.log('uan');&#10;
    p.done();&#10;
}, 2000);&#10;
return p;&#10;
};&#10;
t()&#10;
.then(function(){console.log('two');})&#10;
.then(function(){console.log('tree');});</sample>
</function>
<!--
[MALTA] src/errors/BadName.xml
-->
<function>
    <signature name="BadName">JMVC.Promise(String name)</signature>
    <description>Retrieves a variable from the global JMVC scope</description>
    <params>
        <param name="*name">the name of the new variable to be removed</param>
    </params>
    <returns>the variable reference or value</returns>
    <status>incomplete</status>
    <sample>function t(){&#10;
var p = JMVC.Promise();&#10;
window.setTimeout(function () {&#10;
    console.log('uan');&#10;
    p.done();&#10;
}, 2000);&#10;
return p;&#10;
};&#10;
t()&#10;
.then(function(){console.log('two');})&#10;
.then(function(){console.log('tree');});</sample>
</function>
<!--
[MALTA] src/errors/BadParams.xml
-->
<function>
    <signature name="BadParams">JMVC.Promise(String name)</signature>
    <description>Retrieves a variable from the global JMVC scope</description>
    <params>
        <param name="*name">the name of the new variable to be removed</param>
    </params>
    <returns>the variable reference or value</returns>
    <status>incomplete</status>
    <sample>function t(){&#10;
var p = JMVC.Promise();&#10;
window.setTimeout(function () {&#10;
    console.log('uan');&#10;
    p.done();&#10;
}, 2000);&#10;
return p;&#10;
};&#10;
t()&#10;
.then(function(){console.log('two');})&#10;
.then(function(){console.log('tree');});</sample>
</function> 
<!--
[MALTA] src/errors/ControllerNotFound.xml
-->
<function>
    <signature name="ControllerNotFound">JMVC.Promise(String name)</signature>
    <description>Retrieves a variable from the global JMVC scope</description>
    <params>
        <param name="*name">the name of the new variable to be removed</param>
    </params>
    <returns>the variable reference or value</returns>
    <status>incomplete</status>
    <sample>function t(){&#10;
var p = JMVC.Promise();&#10;
window.setTimeout(function () {&#10;
    console.log('uan');&#10;
    p.done();&#10;
}, 2000);&#10;
return p;&#10;
};&#10;
t()&#10;
.then(function(){console.log('two');})&#10;
.then(function(){console.log('tree');});</sample>
</function>
<!--
[MALTA] src/errors/Network.xml
-->
   <function>
        <signature name="Network">JMVC.Promise(String name)</signature>
        <description>Retrieves a variable from the global JMVC scope</description>
        <params>
            <param name="*name">the name of the new variable to be removed</param>
        </params>
        <returns>the variable reference or value</returns>
        <status>incomplete</status>
        <sample>function t(){&#10;
var p = JMVC.Promise();&#10;
window.setTimeout(function () {&#10;
    console.log('uan');&#10;
    p.done();&#10;
}, 2000);&#10;
return p;&#10;
};&#10;
t()&#10;
.then(function(){console.log('two');})&#10;
.then(function(){console.log('tree');});</sample>
    </function>
</errors>
<!--
[MALTA] src/model/_main.xml
-->
<model>
<!--
[MALTA] src/model/del.xml
-->
<function>
    <signature name="del">del(String varname)</signature>
    <description>removes from a model a variable</description>
    <params>
        <param name="*varname">the variablethat must be removed</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/model/get.xml
-->
<function>
    <signature name="get">get(String varname)</signature>
    <description>If exists retrieve a variable from the Model registry.</description>
    <params>
        <param name="*varname">the name of the variable needed</param>
    </params>
    <returns>the variable value if exists or false</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/model/reset.xml
-->
<function>
    <signature name="reset">reset()</signature>
    <description>Deletes all variables from the Model registry.</description>
    <params>
        <param name="noparams">this function needs no parameters</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/model/set.xml
-->
<function>
    <signature name="set">set(String varname, Mixed value)</signature>
    <description>Add a variable to the Model registry.</description>
    <params>
        <param name="*varname">the name of the variable</param>
        <param name="*value">the value for the variable</param>
    </params>
    <returns>the model instance</returns>
    <status>incomplete</status>
</function>
</model>
<!--
[MALTA] src/view/_main.xml
-->
<view>
<!--
[MALTA] src/view/clone.xml
-->
<function>
    <signature name="clone">clone(String varname)</signature>
    <description>If exists deletes a variable from the View registry.</description>
    <params>
        <param name="*varname">the name of the variable to be deleted</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/view/del.xml
-->
<function>
    <signature name="del">del(String varname)</signature>
    <description>If exists deletes a variable from the View registry.</description>
    <params>
        <param name="*varname">the name of the variable to be deleted</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/view/get.xml
-->
<function>
    <signature name="get">get(String varname)</signature>
    <description>If exists retrieve a variable from the View registry.</description>
    <params>
        <param name="*varname">the name of the variable needed</param>
    </params>
    <returns>the variable value if exists or false</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/view/getFromUrl.xml
-->
<function>
    <signature name="getFromUrl">parse(Model object)</signature>
    <description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
    <params>
        <param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
    </params>
    <returns>the View instance (to access the content use .content attribute)</returns>
    <status>incomplete</status>
</function> 
<!--
[MALTA] src/view/parse.xml
-->
<function>
    <signature name="parse">parse(Model object)</signature>
    <description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
    <params>
        <param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
    </params>
    <returns>the View instance (to access the content use .content attribute)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/view/render.xml
-->
<function>
    <signature name="render">render(Literal pars{Javascript function cback, Array argz, String target})</signature>
    <description>This is the function intended to be used to render the document or a part of it. You can optionally pass three elements within a literal object.</description>
    <params>
        <param name="cback">a callback function that will be executed after rendering</param>
        <param name="argz">an array of parameters that will be passed to the callback</param>
        <param name="target">the default target is document.body but if you pass a string containing the id attribute of an element that is in the\n\t\t\t\t\tDOM (set from previous render with the default target) the content will be set in that element.</param>
    </params>
    <returns>the View instance</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/view/set.xml
-->
<function>
    <signature name="set">set(String varname, Mixed value);</signature>
    <description>Add a variable to the View registry.</description>
    <params>
        <param name="*varname">the name of the variable</param>
        <param name="*value">the value for the variable</param>
    </params>
    <returns></returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/view/setFromUrl.xml
-->
<function>
    <signature name="setFromUrl">parse(Model object)</signature>
    <description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
    <params>
        <param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
    </params>
    <returns>the View instance (to access the content use .content attribute)</returns>
    <status>incomplete</status>
</function>
</view>
<!--
[MALTA] src/controller/_main.xml
-->
<controller>
<!--
[MALTA] src/controller/addRoutes.xml
-->
<function>
    <signature name="addRoutes">addRoutes(Mixed var, String val)</signature>
    <description>Add action routes.</description>
    <params>
        <param name="*content">the content to render</param>
        <param name="callback">a function that will be invoked after content is set</param>
    </params>
    <returns>the Controller instance</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/controller/del.xml
-->
<function>
    <signature name="del">del(String varname)</signature>
    <description>If exists deletes a variable from the Controller registry.</description>
    <params>
        <param name="*varname">the name of the variable to be deleted</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/controller/get.xml
-->
<function>
    <signature name="get">get(String varname)</signature>
    <description>If exists retrieve a variable from the Controller registry.</description>
    <params>
        <param name="*varname">the name of the variable needed</param>
    </params>
    <returns>the variable value if exists or false</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/controller/relocate.xml
-->
<function>
    <signature name="relocate">relocate(String url, int ms)</signature>
    <description>Redirects to a specified location.</description>
    <params>
        <param name="*url">the location to be redirected to</param>
        <param name="ms" default="0">after how many ms</param>
    </params>
    <returns></returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/controller/render.xml
-->
<function>
    <signature name="render">render(String content, Javascript function callback)</signature>
    <description>Renders directly something from the controller, optionally invokes a callback at the end.</description>
    <params>
        <param name="*content">the content to render</param>
        <param name="callback">a function that will be invoked after content is set</param>
    </params>
    <returns>the Controller instance</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/controller/reset.xml
-->
<function>
    <signature name="reset">reset()</signature>
    <description>Deletes all variables from the Controller registry.</description>
    <params>
        <param name="no params">this function needs no parameters</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/controller/set.xml
-->
<function>
    <signature name="set">set(String varname, Mixed value)</signature>
    <description>Add a variable to the Controller registry.</description>
    <params>
        <param name="*varname">the name of the variable</param>
        <param name="*value">the value for the variable</param>
    </params>
    <returns>the controller instance</returns>
    <status>incomplete</status>
</function>
</controller>
<!--
[MALTA] src/css/_main.xml
-->
<css>
<!--
[MALTA] src/css/clearer.xml
-->
<function>
    <signature name="clearer">JMVC.css.clearer()</signature>
    <description>Returns a clearer tag</description>
    <params>
        <param name="">no parameters</param>
    </params>
    <returns>the DOMNode</returns>
    <sample>console.log(JMVC.css.clearer());</sample>
    <code>console.log(JMVC.css.clearer());</code>
    <status>complete</status>
</function>

<!--
[MALTA] src/css/addRule.xml
-->
<function>
    <signature name="addRule">JMVC.css.addRule(DOMNode sheet, String selector, String rules, Integer index)</signature>
    <description>Adds a rule to an existing stylesheet</description>
    <params>
        <param name="*sheet">stylesheet node</param>
        <param name="*selector">the selector</param>
        <param name="*rules">selector rules</param>
        <param name="index" default="appended as last">the position for the new rule</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>JMVC.css.addRule(&#10;
    JMVC.dom.find('style')[0],&#10;
    'body',&#10;
    'background-color:#0DD'&#10;
);</sample>
    <code>JMVC.css.addRule(
JMVC.dom.find('style')[0],
'body',
'background-color:#0DD'
);</code>
    <status>complete</status>
</function>
<!--
[MALTA] src/css/autoHeadings.xml
-->
<function>
    <signature name="autoHeadings">JMVC.css.autoHeadings()</signature>
    <description>Normalize heading tags font-size, line-height and padding </description>
    <params>
        <param name="">no parameters</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>JMVC.css.autoHeadings();</sample>
    <code>JMVC.css.autoHeadings();</code>
    <status>complete</status>
</function>
<!--
[MALTA] src/css/beResponsive.xml
-->
<function>
    <signature name="beResponsive">JMVC.css.beResponsive(Boolean yn)</signature>
    <description>Adds to body tag a class 'resp' mentioned in a set of responsive media queries</description>
    <params>
        <param name="yn" default="true">to switch it on/off</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>JMVC.css.beResponsive();&#10;
&#10;
window.setTimeout(function () {     // and after 10 s get back&#10;
    JMVC.css.beResponsive(0);       // try to strech it before,&#10;
},10000);                           // meanwhile and after&#10;</sample>
    <code>JMVC.css.beResponsive();
window.setTimeout(function () {
    JMVC.css.beResponsive(0);
},10000);</code>
    <status>complete</status>
</function>
<!--
[MALTA] src/css/getComputedStyle.xml
-->
<function>
    <signature name="getComputedStyle">JMVC.css.getComputedStyle(Element el, String property)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*el">dom element target</param>
        <param name="*property">the style to be retrieved</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>var h = JMVC.css.getComputedStyle(document.body, 'height');&#10;
console.log(h);</sample>
    <code>var h = JMVC.css.getComputedStyle(document.body, 'height');
console.log(h);</code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/css/getPosition.xml
-->
<function>
    <signature name="getPosition">JMVC.css.getPosition(DOMNode node, Boolean scrollRelative)</signature>
    <description>attempts to get the absolute position of a node</description>
    <params>
        <param name="*node">target dom element</param>
        <param name="scrollRelative">pass a truly element to get measures relative to to the viewport</param>
    </params>
    <returns>Array [left, top]</returns>
    <sample>var trg = JMVC.dom.find('.intro')[0];&#10;
JMVC.css.style(trg, 'backgroundColor', 'coral');&#10;
console.log('absolute: ', JMVC.css.getPosition(trg));&#10;
console.log('viewport rel: ', JMVC.css.getPosition(trg, true));</sample>
    <code>
        var trg = JMVC.dom.find('.intro')[0];
        JMVC.css.style(trg, 'backgroundColor', 'coral');
        console.log('absolute: ', JMVC.css.getPosition(trg));
        console.log('viewport rel: ', JMVC.css.getPosition(trg, true));
    </code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/css/height.xml
-->
<function>
    <signature name="height">JMVC.css.height(DOMNode target)</signature>
    <description>attempt to get the height of the node passed</description>
    <params>
        <param name="*target">dom element target</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>var h = JMVC.css.height(document.body);&#10;
console.log(h);</sample>
    <code>var h = JMVC.css.height(document.body);
console.log(h);</code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/css/hide.xml
-->
<function>
    <signature name="hide">JMVC.css.hide(DOMNode trg)</signature>
    <description>Hides a node, using the display:none css rule</description>
    <params>
        <param name="*trg">dom element target</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>var trg = JMVC.dom.find('.intro')[0];&#10;
JMVC.css.hide(trg);&#10;
window.setTimeout(function () { // show it back&#10;
    JMVC.css.show(trg);         // after 1 s&#10;
},1000);</sample>
    <code>
        var trg = JMVC.dom.find('.intro')[0];
        JMVC.css.hide(trg);
        window.setTimeout(function () {
            JMVC.css.show(trg);
        },1000);
    </code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/css/pest.xml
-->
<function>
    <signature name="pest">JMVC.css.pest()</signature>
    <description>Toggles a in-browser experimental style inspector</description>
    <params>
        <param name="">no params</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>JMVC.css.pest();</sample>
    <code>JMVC.css.pest();</code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/css/reset.xml
-->
<function>
    <signature name="reset">JMVC.css.reset()</signature>
    <description>Adds the reset css (http://meyerweb.com/eric/tools/css/reset/) thx to Eric A. and Kathryn S. Meyer</description>
    <params>
        <param name="">no params</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>JMVC.css.reset();   // here has no effect&#10;
                    // since jmvc uses it always
    </sample>
    <code>JMVC.css.reset();</code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/css/show.xml
-->
<function>
    <signature name="show">JMVC.css.show(DOMNode trg)</signature>
    <description>Shows a node, using the display:initial css rule</description>
    <params>
        <param name="*trg">dom element target</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>var trg = JMVC.dom.find('.intro')[0];&#10;
JMVC.css.hide(trg);&#10;
window.setTimeout(function () { // show it back&#10;
    JMVC.css.show(trg);         // after 1 s&#10;
},1000);</sample>
    <code>
        var trg = JMVC.dom.find('.intro')[0];
        JMVC.css.hide(trg);
        window.setTimeout(function () {
            JMVC.css.show(trg);
        },1000);
    </code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/css/style.xml
-->
<function>
    <signature name="style">JMVC.css.style(DOMNode trg, Mixed prop, String val)</signature>
    <description>Add inline styles to nodes</description>
    <params>
        <param name="*trg">dom element target</param>
        <param name="*prop">either a String for a single value or a literal for a bunch of rules, in this case val is ignored</param>
        <param name="val">the value, given prop is a string for a property</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>JMVC.css.style(document.body, 'color', 'red');&#10;
window.setTimeout(function () {&#10;
    JMVC.css.style(document.body, {&#10;
        color:'black',&#10;
        backgroundColor : 'black'&#10;
    });&#10;
}, 1000);&#10;
window.setTimeout(function () {&#10;
    JMVC.css.style(&#10;
        document.body, 'backgroundColor', 'white'&#10;
    );&#10;
}, 2000);</sample>
    <code>
        JMVC.css.style(document.body, 'color', 'red');
        window.setTimeout(function () {
            JMVC.css.style(document.body, {color:'black', backgroundColor : 'black'});
        }, 1000);
        window.setTimeout(function () {
            JMVC.css.style(document.body, 'backgroundColor', 'white');
        }, 2000);
    </code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/css/width.xml
-->
<function>
    <signature name="width">JMVC.css.width(DOMNode target)</signature>
    <description>attempt to get the width of the node passed</description>
    <params>
        <param name="*target">dom element target</param>
    </params>
    <returns>void (undefined)</returns>
    <sample>var hb = JMVC.css.width(document.body),&#10;
    hd = JMVC.css.width(document.documentElement);&#10;
console.log(hb, hd);</sample>
    <code>var hb = JMVC.css.width(document.body),
    hd = JMVC.css.width(document.documentElement);
console.log(hb, hd);</code>
    <status>incomplete</status>
</function>
</css>
<!--
[MALTA] src/dom/_main.xml
-->
<dom>
<!--
[MALTA] src/dom/add.xml
-->
<function>
    <signature name="add">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/addClass.xml
-->
<function>
    <signature name="addClass">JMVC.dom.addClass(Element where, String tag, Literal attrs, String inner)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/append.xml
-->
<function>
    <signature name="append">JMVC.dom.append(Element where, Element what)</signature>
    <description>appends an DOM node inside another one</description>
    <params>
        <param name="*where">DOM target node</param>
        <param name="*what">DOM node to append</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/attr.xml
-->
<function>
    <signature name="attr">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/body.xml
-->
<function>
    <signature name="body">JMVC.dom.body()</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/childs.xml
-->
<function>
    <signature name="childs">JMVC.dom.childs(Element where, String tag, Literal attrs, String inner)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/clone.xml
-->
<function>
    <signature name="clone">JMVC.dom.clone(Element where, String tag, Literal attrs, String inner)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/create.xml
-->
<function>
    <signature name="create">JMVC.dom.create(Element where, String tag, Literal attrs, String inner)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/createText.xml
-->
<function>
    <signature name="createText">JMVC.dom.cretaText(Element where, String tag, Literal attrs, String inner)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/createNS.xml
-->
<function>
    <signature name="createNS">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/descendant.xml
-->
<function>
    <signature name="descendant">JMVC.dom.descendant(Element where, Integer n1 [, Integer n2, [...]])</signature>
    <description>retrieves a descendant node starting from a node</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*n1" type="Integer">sdadsa</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/domStats.xml
-->
<function>
    <signature name="domStats">JMVC.dom.domStats(Element where, String tag, Literal attrs, String inner)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/empty.xml
-->
<function>
    <signature name="empty">JMVC.dom.empty(Element where, String tag, Literal attrs, String inner)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/find.xml
-->
<function>
    <signature name="find">JMVC.dom.find(Element where, String tag, Literal attrs, String inner)</signature>
    <description>this is a shortcut that merges create+append</description>
    <params>
        <param name="*where">dom element target</param>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">html content</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/findInnerByClass.xml
-->
<function>
    <signature name="findInnerByClass">JMVC.dom.findInnerByClass(String tag, Literal attrs,String inner)</signature>
    <description>creates a DOM node.</description>
    <params>
        <param name="*tag">tag to be created</param>
        <param name="attrs">object literal for attributes</param>
        <param name="inner">txt content</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/findByAttribute.xml
-->
<function>
    <signature name="findByAttribute">JMVC.dom.findByAttribute(String selector)</signature>
    <description>Finds a node by id (#id) a class (.class) or a tag (tag).</description>
    <params>
        <param name="*selector">the selector</param>
    </params>
    <returns>the found node or false</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/findAncestor.xml
-->
<function>
    <signature name="firstAncestor">JMVC.dom.firstAncestor(String selector)</signature>
    <description>Finds a node by id (#id) a class (.class) or a tag (tag).</description>
    <params>
        <param name="*selector">the selector</param>
    </params>
    <returns>the found node or false</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/hasAttribute.xml
-->
<function>
    <signature name="hasAttribute">JMVC.dom.hasAttribute(String selector)</signature>
    <description>Finds a node by id (#id) a class (.class) or a tag (tag).</description>
    <params>
        <param name="*selector">the selector</param>
    </params>
    <returns>the found node or false</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/hasClass.xml
-->
<function>
    <signature name="hasClass">JMVC.dom.hasClass(String selector)</signature>
    <description>Finds a node by id (#id) a class (.class) or a tag (tag).</description>
    <params>
        <param name="*selector">the selector</param>
    </params>
    <returns>the found node or false</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/html.xml
-->
<function>
    <signature name="html">JMVC.dom.html(Element el, String html)</signature>
    <description>sets or returns the html into an existing element.</description>
    <params>
        <param name="*el">dom element target</param>
        <param name="html">html to set in target, otherwise gets it</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/insertAfter.xml
-->
<function>
    <signature name="insertAfter">JMVC.dom.insertAfter(Element newNode, Element referenceNode)</signature>
    <description>inserts a sibling node after another one</description>
    <params>
        <param name="*newNode">the brand new node</param>
        <param name="*referenceNode">the existing node where postpend the sibling</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/insertBefore.xml
-->
<function>
    <signature name="insertBefore">JMVC.dom.insertBefore(Element newNode, Element referenceNode)</signature>
    <description>inserts a sibling node before another one</description>
    <params>
        <param name="*newNode">the brand new node</param>
        <param name="*referenceNode">the existing node where prepend the sibling</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/isElement.xml
-->
<function>
    <signature name="isElement">JMVC.dom.isElement(Element newNode, Element referenceNode)</signature>
    <description>inserts a sibling node before another one</description>
    <params>
        <param name="*newNode">the brand new node</param>
        <param name="*referenceNode">the existing node where prepend the sibling</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/isNode.xml
-->
<function>
    <signature name="isNode">JMVC.dom.isNode(Element newNode, Element referenceNode)</signature>
    <description>inserts a sibling node before another one</description>
    <params>
        <param name="*newNode">the brand new node</param>
        <param name="*referenceNode">the existing node where prepend the sibling</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/nodeTypeString.xml
-->
<function>
    <signature name="nodeTypeString">JMVC.dom.nodeTypeString(Element newNode, Element referenceNode)</signature>
    <description>inserts a sibling node before another one</description>
    <params>
        <param name="*newNode">the brand new node</param>
        <param name="*referenceNode">the existing node where prepend the sibling</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/nthchild.xml
-->
<function>
    <signature name="nthchild">JMVC.dom.nthchild(Element node, int  num [, Array types ])</signature>
    <description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
    <params>
        <param name="node">The parent where search n-th child</param>
        <param name="num">Starting from 0 the number of the child needed</param>
        <param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/preloadImage.xml
-->
<function>
    <signature name="preloadImage">JMVC.dom.preloadImage(Element node, int  num [, Array types ])</signature>
    <description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
    <params>
        <param name="node">The parent where search n-th child</param>
        <param name="num">Starting from 0 the number of the child needed</param>
        <param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/parent.xml
-->
<function>
    <signature name="parent">JMVC.dom.parent(Element node, int  num [, Array types ])</signature>
    <description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
    <params>
        <param name="node">The parent where search n-th child</param>
        <param name="num">Starting from 0 the number of the child needed</param>
        <param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/prepend.xml
-->
<function>
    <signature name="prepend">JMVC.dom.prepend(Element node, int  num [, Array types ])</signature>
    <description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
    <params>
        <param name="node">The parent where search n-th child</param>
        <param name="num">Starting from 0 the number of the child needed</param>
        <param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/remove.xml
-->
<function>
    <signature name="remove">JMVC.dom.remove(Element node, int  num [, Array types ])</signature>
    <description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
    <params>
        <param name="node">The parent where search n-th child</param>
        <param name="num">Starting from 0 the number of the child needed</param>
        <param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/removeAttribute.xml
-->
<function>
    <signature name="removeAttribute">JMVC.dom.removeAttribute(Element node, int  num [, Array types ])</signature>
    <description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
    <params>
        <param name="node">The parent where search n-th child</param>
        <param name="num">Starting from 0 the number of the child needed</param>
        <param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/removeClass.xml
-->
<function>
    <signature name="removeClass">JMVC.dom.removeClass(Element node, int  num [, Array types ])</signature>
    <description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
    <params>
        <param name="node">The parent where search n-th child</param>
        <param name="num">Starting from 0 the number of the child needed</param>
        <param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/replace.xml
-->
<function>
    <signature name="replace">JMVC.dom.replace(Element outNode, Element inNode)</signature>
    <description>Replace outNode with inNode</description>
    <params>
        <param name="outNode">The node that will be removed</param>
        <param name="inNode">The node that will replace the removed one</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/swap.xml
-->
<function>
    <signature name="swap">JMVC.dom.swap(Element Node1, Element Node2)</signature>
    <description></description>
    <params>
        <param name="Node1">The first DomNode involved</param>
        <param name="Node2">The second DomNode involved</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/switchClass.xml
-->
<function>
    <signature name="switchClass">JMVC.dom.switchClass(Element node, int  num [, Array types ])</signature>
    <description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
    <params>
        <param name="node">The parent where search n-th child</param>
        <param name="num">Starting from 0 the number of the child needed</param>
        <param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/val.xml
-->
<function>
    <signature name="val">JMVC.dom.val(Element node, int  num [, Array types ])</signature>
    <description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
    <params>
        <param name="node">The parent where search n-th child</param>
        <param name="num">Starting from 0 the number of the child needed</param>
        <param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
    </params>
    <returns>the brand new node</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/dom/wrap.xml
-->
<function>
    <signature name="wrap">JMVC.dom.wrap(Element Node1, Element Node2)</signature>
    <description></description>
    <params>
        <param name="Node1">The first DomNode involved</param>
        <param name="Node2">The second DomNode involved</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
</dom>
<!--
[MALTA] src/events/_main.xml
-->
<events>
    
<!--
[MALTA] src/events/delay.xml
-->
<function>
    <signature name="delay">JMVC.events.delay(Javascript function func, Integer ms)</signature>
    <description>Delay the execution of a function</description>
    <params>
        <param name="*func">Javascript function to be called</param>
        <param name="*ms">Milliseconds to delayed call</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/end.xml
-->
<function>
    <signature name="end">JMVC.events.end(Javascript function func)</signature>
    <description>add a function to the end render queue</description>
    <params>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/endRender.xml
-->
<function>
    <signature name="endRender">JMVC.events.endrender()</signature>
    <description>executes the end render queue</description>
    <params>
        <param name="">no params</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/eventTarget.xml
-->
<function>
    <signature name="eventTarget">JMVC.events.eventTarget(Event e)</signature>
    <description>given an event sholud retrieve the original target for that event</description>
    <params>
        <param name="*e">the event</param>
    </params>
    <returns>DOM Element</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/getCoord.xml
-->
<function>
    <signature name="getCoord">JMVC.events.getCoord(Element el, Event e)</signature>
    <description>given an element and a event, try to get event firing coordinates relative to the element</description>
    <params>
        <param name="*el">dom element target</param>
        <param name="*e">the event</param>
    </params>
    <returns>Array [x, y]</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/kill.xml
-->
<function>
    <signature name="kill">JMVC.events.kill(Event e)</signature>
    <description>kills an event</description>
    <params>
        <param name="*e">the event</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
    <sample>JMVC.events.on(window, 'click', function (e){&#10;
    JMVC.events.kill(e);&#10;
});</sample>
    <code>JMVC.events.on(window, 'click', function (e){JMVC.events.kill(e);});</code>
</function>
<!--
[MALTA] src/events/loadify.xml
-->
<function>
    <signature name="loadify">JMVC.events.loadify(Element el, String type, Javascript function fun)</signature>
    <description>binds a callback to an event fired from an element</description>
    <params>
        <param name="el*">dom element target</param>
        <param name="*type">the event string</param>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/off.xml
-->
<function>
    <signature name="off">JMVC.events.off(Element el, String type)</signature>
    <description>unbinds an existing binding</description>
    <params>
        <param name="*el">dom element target</param>
        <param name="*type">the event string</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/on.xml
-->
<function>
    <signature name="on">JMVC.events.on(Element el, String type, Javascript function func)</signature>
    <description>binds a callback to an event fired from an element</description>
    <params>
        <param name="el*">dom element target</param>
        <param name="*type">the event string</param>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/one.xml
-->
<function>
    <signature name="one">JMVC.events.one(Element el, String type, Javascript function fun)</signature>
    <description>binds only once a callback to an event fired from an element</description>
    <params>
        <param name="el*">dom element target</param>
        <param name="*type">the event string</param>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/onEventOut.xml
-->
<function>
    <signature name="onEventOut">JMVC.events.onEventOut(String type, Element el, Javascript function cb)</signature>
    <description>Triggers a callback as the specified event is fired outside the specified element</description>
    <params>
        <param name="*type">the event string</param>
        <param name="el*">dom element target</param>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns>void (undefined)</returns>
    <status>testing</status>
</function>
<!--
[MALTA] src/events/preventDefault.xml
-->
<function>
    <signature name="preventDefault">JMVC.events.preventDefault(Element el, String type, Javascript function fun)</signature>
    <description>binds only once a callback to an event fired from an element</description>
    <params>
        <param name="el*">dom element target</param>
        <param name="*type">the event string</param>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/ready.xml
-->
<function>
    <signature name="ready">JMVC.events.ready(Javascript function func)</signature>
    <description>binds a callback to document load event</description>
    <params>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns></returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/start.xml
-->
<function>
    <signature name="start">JMVC.events.start(Javascript function func)</signature>
    <description>binds a callback to document load event</description>
    <params>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns></returns>
    <status>incomplete</status>
</function>

<!--
[MALTA] src/events/scrollBy.xml
-->
<function>
    <signature name="scrollBy">JMVC.events.scrollBy(Javascript function func)</signature>
    <description>binds a callback to document load event</description>
    <params>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns></returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/scrollTo.xml
-->
<function>
    <signature name="scrollTo">JMVC.events.scrollTo(Javascript function func)</signature>
    <description>binds a callback to document load event</description>
    <params>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns></returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/startRender.xml
-->
<function>
    <signature name="startRender">JMVC.events.startrender(Javascript function func)</signature>
    <description>binds a callback to document load event</description>
    <params>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns></returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/events/touch.xml
-->
<function>
    <signature name="touch">JMVC.events.touch(Javascript function func)</signature>
    <description>binds a callback to document load event</description>
    <params>
        <param name="*func">Javascript function callback</param>
    </params>
    <returns></returns>
    <status>incomplete</status>
</function>
</events>
<!--
[MALTA] src/head/_main.xml
-->
<head>
<!--
[MALTA] src/head/addScript.xml
-->
<function>
    <signature name="addScript">JMVC.head.addScript(String src, Boolean parse, Boolean explicit)</signature>
    <description>Add a script in the head section</description>
    <params>
        <param name="*src">this can be the url of the script or the script content, even &#123; &#123;myscript name=`hello` ... &#125; &#125; can be used</param>
        <param name="parse">set true if You mean to use JMVC.vars variables placeholders in the script</param>
        <param name="explicit">set true if You mean to pass the script content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/head/addStyle.xml
-->
<function>
    <signature name="addStyle">JMVC.head.addStyle(String src, Boolean parse, Boolean explicit)</signature>
    <description>Add a stylesheet in the head section</description>
    <params>
        <param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
        <param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
        <param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/head/denyiXrame.xml
-->
<function>
    <signature name="denyiXrame">JMVC.head.denyiXrame(String src, Boolean parse, Boolean explicit)</signature>
    <description>Add a stylesheet in the head section</description>
    <params>
        <param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
        <param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
        <param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/head/goto.xml
-->
<function>
    <signature name="goto">JMVC.head.goto(String cnt, String act, String prms)</signature>
    <description>Add a stylesheet in the head section</description>
    <params>
        <param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
        <param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
        <param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/head/lastModified.xml
-->
<function>
    <signature name="lastModified">JMVC.head.lastModified(String src, Boolean parse, Boolean explicit)</signature>
    <description>Add a stylesheet in the head section</description>
    <params>
        <param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
        <param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
        <param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/head/lib.xml
-->
<function>
    <signature name="lib">JMVC.head.lib(String lib)</signature>
    <description>Loads an external library</description>
    <params>
        <param name="lib">Library name, now only 'jquery' is available (use CDN)</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
    <sample>JMVC.head.lib('jquery');</sample>
</function>
<!--
[MALTA] src/head/link.xml
-->
<function>
    <signature name="link">JMVC.head.link(String src, Boolean parse, Boolean explicit)</signature>
    <description>Add a stylesheet in the head section</description>
    <params>
        <param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
        <param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
        <param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/head/meta.xml
-->
<function>
    <signature name="meta">JMVC.head.meta(String name, String value, String mode)</signature>
    <description>Add</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/head/metas.xml
-->
<function>
    <signature name="metas">JMVC.head.metas()</signature>
    <description>Get all the document meta tags</description>
    <params>
        <param name="noparams">this function needs no parameters</param>
    </params>
    <returns>Nodes Array</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/head/reload.xml
-->
<function>
    <signature name="reload">JMVC.head.reload(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/head/removeMeta.xml
-->
<function>
    <signature name="removeMeta">JMVC.head.removeMeta(String name, String value, String mode)</signature>
    <description>Add</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/head/title.xml
-->
<function>
    <signature name="title">JMVC.head.title(String title)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="title">The string You want to be set as document title</param>
    </params>
    <returns>the title if no param is passed</returns>
    <status>incomplete</status>
</function>
</head>
<!--
[MALTA] src/io/_main.xml
-->
<io>
<!--
[MALTA] src/io/post.xml
-->
<function>
    <signature name="post">JMVC.io.post(String uri, function cback, boolean sync, Object data, boolean cache)</signature>
    <description>Performs an ajax post call</description>
    <params>
        <param name="*uri">The resource to get</param>
        <param name="*cback">The function that will receive the response and will consume it</param>
        <param name="p" default="false">If true method will be POST</param>
        <param name="sync">If true the call will be synchronous</param>
    </params>
    <returns hint="the response">String</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/io/get.xml
-->
<function>
    <signature name="get">JMVC.io.get(String uri, function cback, boolean p, boolean sync)</signature>
    <description>Performs an ajax call</description>
    <params>
        <param name="*uri">The resource to get</param>
        <param name="*cback">The function that will receive the response and will consume it</param>
        <param name="p" default="false">If true method will be POST</param>
        <param name="sync">If true the call will be synchronous</param>
    </params>
    <status>incomplete</status>
    <returns hint="the response">String</returns>
</function>
<!--
[MALTA] src/io/getJson.xml
-->
<function>
    <signature name="getJson">JMVC.io.getJson(String uri)</signature>
    <description>Evaluate a json and return it</description>
    <params>
        <param name="uri">The resource to get</param>
    </params>
    <returns>The evaluated object or false</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/io/getXML.xml
-->
<function>
    <signature name="getXML">JMVC.io.getXML(String uri)</signature>
    <description>Evaluate a json and return it</description>
    <params>
        <param name="uri">The resource to get</param>
    </params>
    <returns>The evaluated object or false</returns>
    <status>incomplete</status>
</function>
</io>
<!--
[MALTA] src/string/_main.xml
-->
<string>
<!--
[MALTA] src/string/code2str.xml
-->
<function>
    <signature name="code2str">JMVC.string.code2str(Array str)</signature>
    <description>Get a string from a char codes array</description>
    <params>
        <param name="str">The source array</param>
    </params>
    <returns>String</returns>
    <sample>var t = JMVC.string.code2str([&#10;
    105, 110, 102, 111,&#10;
    64,&#10;
    106, 109, 118, 99,&#10;
    46,&#10;
    111, 114, 103]);&#10;
console.log(t);</sample>
    <code>console.clear();console.log(JMVC.string.code2str([105,110,102,111,64,106,109,118,99,46,111,114,103]));</code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/string/multireplace.xml
-->
<function>
    <signature name="multireplace">JMVC.string.multireplace(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/string/padme.xml
-->
<function>
    <signature name="padme">JMVC.string.padme(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/string/replaceAll.xml
-->
<function>
    <signature name="replaceAll">JMVC.string.replaceAll(String tpl, Object rep, [Literal opt])</signature>
    <description>Replace placeholders on a string</description>
    <params>
        <param name="tpl">The string where placeholders must be replaced</param>
        <param name="rep">A replacer object, can be a literal or a function</param>
        <param name="opt">A replacer object, can be a literal or a function</param>
    </params>
    <returns>String</returns>
    <sample>var t = JMVC.string.replaceAll(&#10;
    'The lazy %animalOne% jumps over the poor %animalTwo%',{&#10;
        animalOne : 'dog',&#10;
        animalTwo : 'sheep'&#10;
    });'&#10;
console.log(t);&#10;
&#10;
t = JMVC.string.replaceAll(&#10;
    'The lazy %animal.One% jumps over the poor %animal.Two%',{&#10;
        animal : {&#10;
            One : 'cheetah',&#10;
            Two : 'gazella'&#10;
        }&#10;
    });&#10;
console.log(t);&#10;
&#10;
t = JMVC.string.replaceAll(&#10;
    'The lazy %animal.One% jumps over the poor %animal.Two%',{&#10;
        animal : {&#10;
            One : 'elefant',&#10;
            Two : function (y) {return 'ant ' + y; }&#10;
        }&#10;
    });&#10;
console.log(t);&#10;
&#10;
t = JMVC.string.replaceAll(&#10;
    'The lazy %animal.One% jumps over the poor %animal.Two%',&#10;
        function (k) {return k.replace(/\./, '/'); }&#10;
    );&#10;
console.log(t);
</sample>
    <testlink>test_api_jmvc_extend</testlink>
    <code>
        console.clear();
        var t = JMVC.string.replaceAll(
            'The lazy %animalOne% jumps over the poor %animalTwo%',
            {animalOne : 'dog',animalTwo : 'sheep'}
        );
        console.log(t);
        t = JMVC.string.replaceAll(
            'The lazy %animal.One% jumps over the poor %animal.Two%',{
                animal : {
                    One : 'cheetah',
                    Two : 'gazella'
                }    });
        console.log(t);
        t = JMVC.string.replaceAll(
            'The lazy %animal.One% jumps over the poor %animal.Two%',{
                animal : {
                    One : 'elefant',
                    Two : function (y) {return 'ant #'+y; }
                }
            });
        console.log(t);
        t = JMVC.string.replaceAll(
            'The lazy %animal.One% jumps over the poor %animal.Two%',
                function (k) {return k.replace(/\./, '/'); }
            );
        console.log(t);
    </code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/string/str2code.xml
-->
<function>
    <signature name="str2code">JMVC.string.str2code(String str)</signature>
    <description>Get the char codes from a string</description>
    <params>
        <param name="str">The source string</param>
    </params>
    <returns>Array[int]</returns>
    <sample>var t = JMVC.string.str2code('info@jmvc.org');&#10;console.log(t);</sample>
    <code>console.clear();console.log(JMVC.string.str2code('info@jmvc.org'));</code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/string/repeat.xml
-->
<function>
    <signature name="repeat">JMVC.string.repeat(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/string/trim.xml
-->
<function>
    <signature name="trim">JMVC.string.trim(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/string/triml.xml
-->
<function>
    <signature name="triml">JMVC.string.triml(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/string/trimr.xml
-->
<function>
    <signature name="trimr">JMVC.string.trimr(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
</string>
<!--
[MALTA] src/object/_main.xml
-->
<object>
<!--
[MALTA] src/object/clone.xml
-->
<function>
    <signature name="clone">JMVC.object.clone(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/object/digForKey.xml
-->
<function>
    <signature name="digForKey">JMVC.object.digForKey(Object obj, Mixed elem)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <testlink>test_api_digfor</testlink>
    <status>incomplete</status>
    <sample>var res = JMVC.object.digForKey({&#10;
    a : [1,2,3,4],&#10;
    b : "ciao",&#10;
    c : function () {},&#10;
    d : [{b : 1}, {b : 2}, {jo : {yu :{a:1234}}}]&#10;
}, 'a');&#10;
console.log(res);</sample>
    <code>var res = JMVC.object.digForKey({
  a : [1,2,3,4],
  b : 'ciao',
  c : function () {},
  d : [{b : 1}, {b : 2}, {jo : {yu :{a:1234}}}]
}, 'a');
console.log(res);</code>
</function>
<!--
[MALTA] src/object/digForValue.xml
-->
<function>
    <signature name="digForValue">JMVC.object.digForValue(Object obj, Mixed elem)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
    <sample>var res = JMVC.object.digForValue({&#10;
    a : [1,2,3,4],&#10;
    b : "ciao",&#10;
    c : function () {},&#10;
    d : [{b : 1}, {b : 2}, {jo : {yu :{a:1234}}}]&#10;
}, 1);&#10;
console.log(res);</sample>
    <code>var res = JMVC.object.digForValue({
  a : [1,2,3,4],
  b : 'ciao',
  c : function () {},
  d : [{b : 1}, {b : 2}, {jo : {yu :{a:1234}}}]
}, 1);
console.log(res);</code>
</function>
<!--
[MALTA] src/object/extend.xml
-->
<function>
    <signature name="extend">JMVC.object.extend(obj, extension)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>Object</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/object/fromQs.xml
-->
<function>
    <signature name="fromQs">JMVC.object.fromQs()</signature>
    <description>Get an object literal representing the url querystring</description>
    <params>
        <param name="noparams">this function needs no parameters</param>
    </params>
    <returns>the object literal containing the querystring values (Object Literal)</returns>
    <sample>// open the console to see the result&#10;
var w = window.open(&#10;
    JMVC.vars.baseurl + '?a=1&amp;b=2&amp;c=hello%20world',&#10;
    '',&#10;
    'width=600,height=600,top=50,left=50'&#10;
);&#10;
w.onload = function() {console.debug(w.JMVC.object.fromQs());};</sample>
    <code>var w = window.open(JMVC.vars.baseurl + '?a=1&amp;b=2&amp;c=hello%20world','','width=600,height=600,top=50,left=50');
    	w.onload = function() {console.debug(w.JMVC.object.fromQs());};</code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/object/compare.xml
-->
<function>
    <signature name="compare">JMVC.object.compare(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/object/contains.xml
-->
<function>
    <signature name="contains">JMVC.object.contains(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/object/jCompare.xml
-->
<function>
    <signature name="jCompare">JMVC.object.jCompare(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/object/toAttr.xml
-->
<function>
    <signature name="toAttr">JMVC.object.toAttr(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/object/toCss.xml
-->
<function>
    <signature name="toCss">JMVC.object.toCss(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/object/toQs.xml
-->
<function>
    <signature name="toQs">JMVC.object.toQs(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
</object>
<!--
[MALTA] src/array/_main.xml
-->
<array>
<!--
[MALTA] src/array/clone.xml
-->
<function>
    <signature name="clone">JMVC.array.clone(Array arr)</signature>
    <description>Clones an array</description>
    <params>
        <param name="arr">The array to be cloned</param>
    </params>
    <returns>The cloned array (Array)</returns>
    <testlink>test_api_array_arrayclone</testlink>
    <sample>var a1 = [1,2,3,4,5,function (){return 'Array';}],&#10;
    a2 = JMVC.array.clone(a1);&#10;
a2.shift();&#10;
a2.push(function () {return 'another Array';});&#10;
a2[4] = function () {return 'Array clone';};&#10;
console.log(a1);&#10;
console.log(a1[5]());&#10;
console.log(a2);&#10;
console.log(a2[4]());&#10;
console.log(a2[5]());</sample>
    <code>var a1 = [1,2,3,4,5,function (){return 'Array';}],
    a2 = JMVC.array.clone(a1);
a2.shift();
a2.push(function () {return 'another Array';});
a2[4] = function () {return 'Array clone';};
console.log(a1);
console.log(a1[5]());
console.log(a2);
console.log(a2[4]());
console.log(a2[5]());
</code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/array/coll2array.xml
-->
<function>
    <signature name="coll2array">JMVC.array.coll2array(HTMLCollection coll)</signature>
    <description>Get an array from an HTMLCollection</description>
    <params>
        <param name="coll">The HTMLCollection</param>
    </params>
    <returns>array containing the HTMLCollection elements (array)</returns>
    <testlink>test_api_array_coll2array</testlink>
    <sample>&#10;
var coll = document.getElementsByTagName('div'),&#10;
    a = JMVC.array.coll2array(coll);&#10;
console.log(coll.constructor);&#10;
console.log(coll instanceof HTMLCollection);&#10;
console.log(a.constructor);&#10;
console.log(a instanceof Array);</sample>
    <code>var coll = document.getElementsByTagName('div'),
    a = JMVC.array.coll2array(coll);
console.log(coll.constructor);
console.log(coll instanceof HTMLCollection);
console.log(a.constructor);
console.log(a instanceof Array);
    </code>
    <status>testing</status>
</function>
<!--
[MALTA] src/array/find.xml
-->
<function>
    <signature name="find">JMVC.array.find(Array arr, Mixed el)</signature>
    <description>Look for an element in a array</description>
    <params>
        <param name="arr">The Array where the element presence will be checked</param>
        <param name="el">The element searched</param>
    </params>
    <returns>The index of the element if found or -1 (integer)</returns>
    <testlink>test_api_array_find</testlink>
    <sample>var a = [10, 7, 6, 1, 2, 9, 2, [1,2,3], function(){}, {a:{c:2}, b:3}];&#10;
console.log(JMVC.array.find(a, 2));&#10;
console.log(JMVC.array.find(a, [1,2,3]));</sample>
    <code>var a = [10, 7, 6, 1, 2, 9, 2, [1,2,3], function(){}, {a:{c:2}, b:3}];
console.log(JMVC.array.find(a, 2));
console.log(JMVC.array.find(a, [1,2,3]));
    </code>
    <status>testing</status>
</function>
<!--
[MALTA] src/array/findAll.xml
-->
<function>
    <signature name="findAll">JMVC.array.findAll(Array arr, Mixed el)</signature>
    <description>Look for an element in a array</description>
    <params>
        <param name="arr">The Array where the element presence will be checked</param>
        <param name="el">The element searched</param>
    </params>
    <returns>The index of the element if found or -1 (integer)</returns>
    <testlink>test_api_array_findAll</testlink>
    <sample>var a = [10, 7, 6, 1, 2, 9, 2, [1,2,3], function(){}, {a:{c:2}, b:3}];&#10;
console.log(JMVC.array.findAll(a, 2));&#10;
console.log(JMVC.array.findAll(a, [1,2,3]));
    </sample>
    <code>
        var a = [10, 7, 6, 1, 2, 9, 2, [1,2,3], function(){}, {a:{c:2}, b:3}];
        console.log(JMVC.array.findAll(a, 2));
        console.log(JMVC.array.findAll(a, [1,2,3]));
    </code>
    <status>testing</status>
</function>
<!--
[MALTA] src/array/findRich.xml
-->
<function>
    <signature name="findRich">JMVC.array.findRich(String name, String value)</signature>
    <description>Gets/sets document title</description>
    <params>
        <param name="name">The name of the meta You want to add</param>
        <param name="value">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <testlink>test_api_array_inarraydeep</testlink>
    <sample>var a = [10, 7, 6, 1, 2, 9, 2, [1,2,3], function(){}, {a:{c:2}, b:3}];&#10;
console.log(JMVC.array.findRich(a, 2),&#10;
console.log(JMVC.array.findRich(a, [1,2,3]));&#10;
console.log(JMVC.array.findRich(a, function (){}));&#10;
console.log(JMVC.array.findRich(a, {c:2}));
    </sample>
    <code>
        var a = [10, 7, 6, 1, 2, 9, 2, [1,2,3], function(){}, {a:{c:2}, b:3}];
        console.log(JMVC.array.findRich(a, 2));
        console.log(JMVC.array.findRich(a, [1,2,3]));
        console.log(JMVC.array.findRich(a, function(){}));
        console.log(JMVC.array.findRich(a, {c:2}));
    </code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/array/fromArguments.xml
-->
<function>
    <signature name="fromArguments">JMVC.array.fromArguments(PseudoArray args)</signature>
    <description>Get a real array of arguments given the function arguments object</description>
    <params>
        <param name="arg">The 'arguments' of a function</param>
    </params>
    <returns>The array of arguments</returns>
    <sample>!function () {&#10;
    var args = JMVC.array.fromArguments(arguments);&#10;
    console.log(arguments);&#10;
    console.log(arguments instanceof Array); // false&#10;
    console.log(args);&#10;
    console.log(args instanceof Array); // true&#10;
}(1, {theme : 'dark'}, [2,8,6]);</sample>
    <code>
        !function () {
            var args = JMVC.array.fromArguments(arguments);
            console.log(arguments);
            console.log(arguments instanceof Array);
            console.log(args);
            console.log(args instanceof Array);
        }(1, {theme : 'dark'}, [2,8,6]);
    </code>
</function>
<!--
[MALTA] src/array/move.xml
-->
<function>
    <signature name="move">JMVC.array.move(Integer from, Integer to)</signature>
    <description>Gets an array of all the numbers [from, to]</description>
    <params>
        <param name="from">The name of the meta You want to add</param>
        <param name="to">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <testlink>test_api_array_inarrayrich</testlink>
    <sample>console.log(JMVC.array.range(5,15));</sample>
    <code>console.log(JMVC.array.range(5,15));</code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/array/range.xml
-->
<function>
    <signature name="range">JMVC.array.range(Integer from, Integer to)</signature>
    <description>Gets an array of all the numbers [from, to]</description>
    <params>
        <param name="from">The name of the meta You want to add</param>
        <param name="to">The value of the meta You want to add</param>
    </params>
    <returns>void (undefined)</returns>
    <testlink>test_api_array_inarrayrich</testlink>
    <sample>console.log(JMVC.array.range(5,15));</sample>
    <code>console.log(JMVC.array.range(5,15));</code>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/array/unique.xml
-->
<function>
    <signature name="unique">JMVC.array.unique(Array a)</signature>
    <description>Return the passed array free of duplicated; the comparison is based on ===, so different
        references to equal object will remain untouched. In fact Strings, Numbers and Booleans are passed 
        by value while Arrays, Objects (thus functions) are passed by reference.</description>
    <params>
        <param name="a">The array to clean</param>
    </params>
    <returns>Array</returns>
    <testlink>test_api_array_unique</testlink>
    <sample>var a = [&#10;
    5,2,3,7,54,12,34,45,56,54,43,3,3,22,&#10;
    function (){},2,2,2,2,1,1,1,1,1,1,1,&#10;
    'name', 'surname',8,8,8,1,'address',&#10;
    function (){}, 'name', 'surname',&#10;
];&#10;
console.log(JMVC.array.unique(a));</sample>
    <code>
        var a = [
            5,2,3,7,54,12,34,45,56,54,43,3,3,22,
            function (){},2,2,2,2,1,1,1,1,1,1,1,
            'name', 'surname',8,8,8,1,'address',
            function (){}, 'name', 'surname'
        ];
        console.log(JMVC.array.unique(a));
    </code>
    <status>incomplete</status>
</function>
</array>
<!--
[MALTA] src/util/_main.xml
-->
<util>
<!--
[MALTA] src/util/deg2rad.xml
-->
<function>
    <signature name="deg2rad">JMVC.util.deg2rad(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/util/getParameters.xml
-->
<function>
    <signature name="getParameters">JMVC.util.getParameters(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/util/getType.xml
-->
<function>
    <signature name="getType">JMVC.util.getType(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/util/hex2int.xml
-->
<function>
    <signature name="hex2int">JMVC.util.hex2int(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/util/int2hex.xml
-->
<function>
    <signature name="int2hex">JMVC.util.int2hex(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/util/isArray.xml
-->
<function>
    <signature name="isArray">JMVC.util.isArray(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/util/isObject.xml
-->
<function>
    <signature name="isObject">JMVC.util.isObject(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/util/isSet.xml
-->
<function>
    <signature name="isSet">JMVC.util.isSet(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/util/isTypeOf.xml
-->
<function>
    <signature name="isTypeOf">JMVC.util.isTypeOf(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/util/now.xml
-->
<function>
    <signature name="now">JMVC.util.now(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/util/rad2deg.xml
-->
<function>
    <signature name="rad2deg">JMVC.util.rad2deg(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
<!--
[MALTA] src/util/range.xml
-->
<function>
    <signature name="range">JMVC.util.range(str, obj, ctx)</signature>
    <description>Check a namspace</description>
    <params>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
        <param name="name">The variable to check</param>
    </params>
    <returns>void (undefined)</returns>
    <status>incomplete</status>
</function>
</util>
<!--
[MALTA] src/match/_main.xml
-->
<match>
<!--
[MALTA] src/match/email.xml
-->
<function>
    <signature name="email">JMVC.match.email(String email)</signature>
    <description>Check if a the passed string represents a valid email</description>
    <params>
        <param name="email*">The string email that must be checked</param>
    </params>
    <returns>boolean</returns>
    <sample>var t = JMVC.match.email('fedeghe@gmail.com');</sample>
    <status>incomplete</status>
    <testlink></testlink>           
</function>
<!--
[MALTA] src/match/url.xml
-->
<function>
    <signature name="url">JMVC.match.url(String url)</signature>
    <description>Check if a the passed string represents a valid url</description>
    <params>
        <param name="url*">The string url that must be checked</param>
    </params>
    <returns>boolean</returns>
    <sample>var t = JMVC.match.url('http://www.jmvc.org?map=true');</sample>
    <status>incomplete</status>
    <testlink></testlink>           
</function>
</match>
</api>  
