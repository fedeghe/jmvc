<?xml version="1.0"?>
<api>
<!--








#############################################

                                                
         _/  _/      _/  _/      _/    _/_/_/   
        _/  _/_/  _/_/  _/      _/  _/          
       _/  _/  _/  _/  _/      _/  _/           
_/    _/  _/      _/    _/  _/    _/            
 _/_/    _/      _/      _/        _/_/_/       

#############################################
-->
	<jmvc>

		
		<function>
			<signature name="check_ns">JMVC.check_ns(String ns [,Object ctx])</signature>
			<description>Returns a namespace if exists</description>
			<params>
				<param name="*ns">The namespace to check, a String dot glued</param>
				<param name="ctx" default="Window">The root namespace</param>
			</params>
			<returns>namespace || false</returns>
			<sample>&#10;
var loaded_extensions = JMVC.check_ns('extensions', JMVC),&#10;
	// or&#10; 
	loadedExtensions =  JMVC.check_ns('JMVC.extensions'),&#10;
	foo = JMVC.check_ns('foo', JMVC); //false
			</sample>
			<status>complete</status>
			<testlink>test_api_jmvc_checkns</testlink>
		</function>

		<function>
			<signature name="console">JMVC.console()</signature>
			<description>Toggles html+css+js+preview console</description>
			<params>
				<param name="">this function needs no parameters</param>
			</params>
			<returns>void (undefined)</returns>
			<sample>JMVC.console();</sample>

		</function>

		<function>
			<signature name="debug">JMVC.debug(String name)</signature>
			<description>Debugs on console any element passed, degades until alert</description>
			<params>
				<param name="...">all parameters to be debugged</param>
			</params>
			<returns>the variable reference or value</returns>
			<sample>&#10;
var arr = [1,2,3,4,5],&#10; 
	obj =  {name : "Federico", surname : "Ghedina", say : "WAT"},&#10;
	foo = function (){alert('foo'); };&#10;
JMVC.debug(arr, obj, foo);
</sample>
		</function>
		<function>
			<signature name="del">JMVC.del(String name)</signature>
			<description>Removes a variable from the global JMVC register</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>JMVC</returns>

		</function>

		
		<function>
			<signature name="delegate">JMVC.delegate(Function func, Object obj)</signature>
			<description>Get a function with a delegated context</description>
			<params>
				<param name="*func">the function that must be binded to the object</param>
				<param name="*obj">the object where the function must be binded</param>
			</params>
			<returns>the function binded</returns>
			<sample>var y = {type:'literal'},&#10;
    t = JMVC.delegate(function(){console.debug(this.type);}, y);&#10;
t(); // literal&#10;</sample>
			<status>complete</status>
			<testlink>test_api_jmvc_delegate</testlink>
		</function>


		<function>
			<signature name="each">JMVC.each(obj, fn)</signature>
			<description>Loop over an object literal or Array, the callback at each cycle will receive the object and his index. As far as the callback has a name, the two `continue` and `break` function are available</description>
			<params>
				<param name="*obj">the object to loop Object literal or Array</param>
				<param name="*fn">the loop callback</param>
			</params>
			<returns>void (undefined)</returns>
			<sample>&#10;
var obj = {name:'Federico', surname : 'Ghedina', says : 'wat'},&#10;
	arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],&#10;
	objAfter = JMVC.each(obj, function (el, i) {&#10;
		console.debug(i, el);&#10;
	}),&#10;
	arrAfter = JMVC.each(arr, function f(el, i) {&#10;
		if (i % 2) { //will skip odd indexed elements&#10;
			f.continue();&#10;
		}&#10;
		return i;&#10;
	});&#10;
console.debug(obj, objAfter);&#10;
console.debug(arr, arrAfter);&#10;</sample>
			<status>testing</status>
			<testlink>test_api_jmvc_each</testlink>>
		</function>
		<function>
			<signature name="Event">JMVC.Event()</signature>
			<description>Event is a special constructor to get </description>
			<params>
				<param name="*name"></param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="expose">JMVC.expose()</signature>
			<description></description>
			<params>
				<param name="*name"></param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="extend">JMVC.extend(String section, Literal extension)</signature>
			<description>Extends JMVC object with Your objects</description>
			<params>
				<param name="*section">	that parameter is needed to set the namespace under which Your functions will be added toJMVC, if You use `ajax` then all functions in the literal will be callable with JMVC.ajax.my_function(....)</param>
				<param name="*extension">this object literal defines all the functions in your extension (JMVC is in that scope, so You can use it)</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="factory">JMVC.extend(String section, Literal extension)</signature>
			<description>Extends JMVC object with Your objects</description>
			<params>
				<param name="*section">	that parameter is needed to set the namespace under which Your functions will be added toJMVC, if You use `ajax` then all functions in the literal will be callable with JMVC.ajax.my_function(....)</param>
				<param name="*extension">this object literal defines all the functions in your extension (JMVC is in that scope, so You can use it)</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="get">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="getModel">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="getView">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
		</function>
		<function>
			<signature name="globalize">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="hook">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="htmlspecialchars">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
		</function>
		<function>
			<signature name="implement">JMVC.implement(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="inherit">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="interface">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="jeval">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
		</function>
		<function>
			<signature name="lang">JMVC.lang(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="loadinterfaces">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="make_ns">JMVC.make_ns(str, obj, ctx)</signature>
			<description>Creates a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="noop">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
		</function>
		<function>
			<signature name="parselang">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="promise">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="prototipize">JMVC.prototipize(Constructor func, Enanching Literal)</signature>
			<description>Allows to add properties and methods to the prototype of a constructor</description>
			<params>
				<param name="*unc">the constructor to be enanched</param>
				<param name="*name">the literal object that contains wanted properties and methods</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="purge">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="render">JMVC.prototipize(Constructor func, Enanching Literal)</signature>
			<description>Allows to add properties and methods to the prototype of a constructor</description>
			<params>
				<param name="*unc">the constructor to be enanched</param>
				<param name="*name">the literal object that contains wanted properties and methods</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="require">JMVC.require(String extension1, String extension2, ...)</signature>
			<description>Loads one or more extensions into the JMVC object</description>
			<params>
				<param name="*extension1">the name of the javascript file (must be in extensions folder) to be loaded. That file will use JMVC.extend function (see the `More` section)</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="set">JMVC.set(String name, String value)</signature>
			<description>Adds a variable that You can use anywhere</description>
			<params>
				<param name="*name">the name of the new variable, use it typing &#36;thename&#36;</param>
				<param name="*value">the value of the variable</param>
			</params>
			<returns>void (undefined)</returns>
		</function>

		<param>
			<name>W</name>
			<type>reference</type>
			<description>JMVC.W is a reference to th current window object</description>
		</param>
	</jmvc>	


<!--























                                    _/            _/   
   _/_/_/  _/_/      _/_/      _/_/_/    _/_/    _/    
  _/    _/    _/  _/    _/  _/    _/  _/_/_/_/  _/     
 _/    _/    _/  _/    _/  _/    _/  _/        _/      
_/    _/    _/    _/_/      _/_/_/    _/_/_/  _/       

#####################################################
-->
	<model>	
		<function>
			<signature name="del">firma(String varname, ...)</signature>
			<description>here is the description</description>
			<params>
				<param name="*varname">explanation for that variable</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="get">get(String varname)</signature>
			<description>If exists retrieve a variable from the Model registry.</description>
			<params>
				<param name="*varname">the name of the variable needed</param>
			</params>
			<returns>the variable value if exists or false</returns>
		</function>
		<function>
			<signature name="reset">reset()</signature>
			<description>Deletes all variables from the Model registry.</description>
			<params>
				<param name="noparams">this function needs no parameters</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="set">set(String varname, Mixed value)</signature>
			<description>Add a variable to the Model registry.</description>
			<params>
				<param name="*varname">the name of the variable</param>
				<param name="*value">the value for the variable</param>
			</params>
			<returns>the model instance</returns>
		</function>
	</model>





<!--



















	                                                
	              _/                                
	 _/      _/        _/_/    _/      _/      _/   
	_/      _/  _/  _/_/_/_/  _/      _/      _/    
	 _/  _/    _/  _/          _/  _/  _/  _/       
	  _/      _/    _/_/_/      _/      _/          
	                                                
##################################################
-->
	<view>
		<function>
			<signature name="clone">clone(String varname)</signature>
			<description>If exists deletes a variable from the View registry.</description>
			<params>
				<param name="*varname">the name of the variable to be deleted</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="del">del(String varname)</signature>
			<description>If exists deletes a variable from the View registry.</description>
			<params>
				<param name="*varname">the name of the variable to be deleted</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="get">get(String varname)</signature>
			<description>If exists retrieve a variable from the View registry.</description>
			<params>
				<param name="*varname">the name of the variable needed</param>
			</params>
			<returns>the variable value if exists or false</returns>
		</function>
		<function>
			<signature name="get_from_url">parse(Model object)</signature>
			<description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
			<params>
				<param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
			</params>
			<returns>the View instance (to access the content use .content attribute)</returns>
		</function>	
		<function>
			<signature name="parse">parse(Model object)</signature>
			<description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
			<params>
				<param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
			</params>
			<returns>the View instance (to access the content use .content attribute)</returns>
		</function>			
		<function>
			<signature name="render">render(Literal pars{Javascript function cback, Array argz, String target})</signature>
			<description>This is the function intended to be used to render the document or a part of it. You can optionally pass three elements within a literal object.</description>
			<params>
				<param name="cback">a callback function that will be executed after rendering</param>
				<param name="argz">an array of parameters that will be passed to the callback</param>
				<param name="target">the default target is document.body but if you pass a string containing the id attribute of an element that is in the\n\t\t\t\t\tDOM (set from previous render with the default target) the content will be set in that element.</param>
			</params>
			<returns>the View instance</returns>
		</function>
		<function>
			<signature name="set">set(String varname, Mixed value);</signature>
			<description>Add a variable to the View registry.</description>
			<params>
				<param name="*varname">the name of the variable</param>
				<param name="*value">the value for the variable</param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="set_from_url">parse(Model object)</signature>
			<description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
			<params>
				<param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
			</params>
			<returns>the View instance (to access the content use .content attribute)</returns>
		</function>
	</view>
<!--



















                                   _/                          _/  _/    
    _/_/_/    _/_/    _/_/_/    _/_/_/_/  _/  _/_/    _/_/    _/  _/       _/_/    _/  _/_/
 _/        _/    _/  _/    _/    _/      _/_/      _/    _/  _/  _/     _/_/_/_/  _/_/
_/        _/    _/  _/    _/    _/      _/        _/    _/  _/  _/     _/        _/
 _/_/_/    _/_/    _/    _/      _/_/  _/          _/_/    _/  _/       _/_/_/  _/

##########################################################################################
-->
	<controller>
		<function>
			<signature name="set">set(String varname, Mixed value)</signature>
			<description>Add a variable to the Controller registry.</description>
			<params>
				<param name="*varname">the name of the variable</param>
				<param name="*value">the value for the variable</param>
			</params>
			<returns>the controller instance</returns>
		</function>
		<function>
			<signature name="get">get(String varname)</signature>
			<description>If exists retrieve a variable from the Controller registry.</description>
			<params>
				<param name="*varname">the name of the variable needed</param>
			</params>
			<returns>the variable value if exists or false</returns>
		</function>
		<function>
			<signature name="del">del(String varname)</signature>
			<description>If exists deletes a variable from the Controller registry.</description>
			<params>
				<param name="*varname">the name of the variable to be deleted</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="reset">reset()</signature>
			<description>Deletes all variables from the Controller registry.</description>
			<params>
				<param name="no params">this function needs no parameters</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="relocate">relocate(String url, int ms)</signature>
			<description>Redirects to a specified location.</description>
			<params>
				<param name="*url">the location to be redirected to</param>
				<param name="ms" default="0">after how many ms</param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="render">render(String content, Javascript function callback)</signature>
			<description>Renders directly something from the controller, optionally invokes a callback at the end.</description>
			<params>
				<param name="*content">the content to render</param>
				<param name="callback">a function that will be invoked after content is set</param>
			</params>
			<returns>the Controller instance</returns>
		</function>
		<function>
			<signature name="addRoutes">addRoutes(Mixed var, String val)</signature>
			<description>Add action routes.</description>
			<params>
				<param name="*content">the content to render</param>
				<param name="callback">a function that will be invoked after content is set</param>
			</params>
			<returns>the Controller instance</returns>
		</function>
	</controller>


<!--




























	         _/                           
	    _/_/_/    _/_/    _/_/_/  _/_/    
	 _/    _/  _/    _/  _/    _/    _/   
	_/    _/  _/    _/  _/    _/    _/    
	 _/_/_/    _/_/    _/    _/    _/     

#######################################
-->
	<dom>

		<function>
			<signature name="add">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>

		<function>
			<signature name="addClass">JMVC.dom.addClass(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="append">JMVC.dom.append(Element where, Element what)</signature>
			<description>appends an DOM node inside another one</description>
			<params>
				<param name="*where">DOM target node</param>
				<param name="*what">DOM node to append</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="attr">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="body">JMVC.dom.body()</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="childs">JMVC.dom.childs(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="clone">JMVC.dom.clone(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="create">JMVC.dom.create(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="createText">JMVC.dom.cretaText(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="createNS">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="empty">JMVC.dom.empty(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="find">JMVC.dom.find(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="findInnerByClass">JMVC.dom.findInnerByClass(String tag, Literal attrs,String inner)</signature>
			<description>creates a DOM node.</description>
			<params>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">txt content</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="findByAttribute">JMVC.dom.findByAttribute(String selector)</signature>
			<description>Finds a node by id (#id) a class (.class) or a tag (tag).</description>
			<params>
				<param name="*selector">the selector</param>
			</params>
			<returns>the found node or false</returns>
		</function>
		<function>
			<signature name="hasAttribute">JMVC.dom.hasAttribute(String selector)</signature>
			<description>Finds a node by id (#id) a class (.class) or a tag (tag).</description>
			<params>
				<param name="*selector">the selector</param>
			</params>
			<returns>the found node or false</returns>
		</function>
		<function>
			<signature name="hasClass">JMVC.dom.hasClass(String selector)</signature>
			<description>Finds a node by id (#id) a class (.class) or a tag (tag).</description>
			<params>
				<param name="*selector">the selector</param>
			</params>
			<returns>the found node or false</returns>
		</function>
		<function>
			<signature name="html">JMVC.dom.html(Element el, String html)</signature>
			<description>sets or returns the html into an existing element.</description>
			<params>
				<param name="*el">dom element target</param>
				<param name="html">html to set in target, otherwise gets it</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="insertAfter">JMVC.dom.insertAfter(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node after another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where postpend the sibling</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="insertBefore">JMVC.dom.insertBefore(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node before another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where prepend the sibling</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="isElement">JMVC.dom.isElement(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node before another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where prepend the sibling</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="isNode">JMVC.dom.isNode(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node before another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where prepend the sibling</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="nodeTypeString">JMVC.dom.nodeTypeString(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node before another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where prepend the sibling</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="nthchild">JMVC.dom.nthchild(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="preloadImage">JMVC.dom.preloadImage(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="parent">JMVC.dom.parent(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="prepend">JMVC.dom.prepend(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="remove">JMVC.dom.remove(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="removeAttribute">JMVC.dom.removeAttribute(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="removeClass">JMVC.dom.removeClass(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="switchClass">JMVC.dom.switchClass(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="val">JMVC.dom.val(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
		</function>
	</dom>
<!--
























                                               _/                
    _/_/    _/      _/    _/_/    _/_/_/    _/_/_/_/    _/_/_/   
 _/_/_/_/  _/      _/  _/_/_/_/  _/    _/    _/      _/_/        
_/          _/  _/    _/        _/    _/    _/          _/_/     
 _/_/_/      _/        _/_/_/  _/    _/      _/_/  _/_/_/        

###############################################################  
-->
	<events>
		<function>
			<signature name="bind">JMVC.events.bind(Element el, String type, Javascript function fun)</signature>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="delay">JMVC.events.delay(Element el, String type, Javascript function fun)</signature>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="end">JMVC.events.end(Element el, String type, Javascript function fun)</signature>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="endrender">JMVC.events.endrender(Element el, String type, Javascript function fun)</signature>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="eventTarget">JMVC.events.eventTarget(Element el, String type, Javascript function fun)</signature>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="getCoord">JMVC.events.getCoord(Element el, String type, Javascript function fun)</signature>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="kill">JMVC.events.kill(Element el, String type, Javascript function fun)</signature>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="loadify">JMVC.events.loadify(Element el, String type, Javascript function fun)</signature>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="one">JMVC.events.one(Element el, String type, Javascript function fun)</signature>
			<description>binds only once a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="preventDefault">JMVC.events.preventDefault(Element el, String type, Javascript function fun)</signature>
			<description>binds only once a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="ready">JMVC.events.ready(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="start">JMVC.events.start(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="scrollBy">JMVC.events.scrollBy(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="scrollTo">JMVC.events.scrollTo(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="startrender">JMVC.events.startrender(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="touch">JMVC.events.touch(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="unbind">JMVC.events.unbind(Element el, String type)</signature>
			<description>unbinds an existing binding</description>
			<params>
				<param name="*el">dom element target</param>
				<param name="*type">the event string</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
	</events>
<!--
































	                                             
    _/                                  _/
   _/_/_/      _/_/      _/_/_/    _/_/_/
  _/    _/  _/_/_/_/  _/    _/  _/    _/
 _/    _/  _/        _/    _/  _/    _/
_/    _/    _/_/_/    _/_/_/    _/_/_/

###############################################	                                             
-->
	<head>
		<function>
			<signature name="addscript">JMVC.head.addscript(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a script in the head section</description>
			<params>
				<param name="*src">this can be the url of the script or the script content (you can even use \{\{myscript name=`hello` ... \{\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the script</param>
				<param name="explicit">set true if You mean to pass the script content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="addstyle">JMVC.head.addstyle(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
				<param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="denyiXrame">JMVC.head.denyiXrame(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
				<param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="goto">JMVC.head.goto(String cnt, String act, String prms)</signature>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
				<param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="lastmodified">JMVC.head.lastmodified(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
				<param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="link">JMVC.head.link(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
				<param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="meta">JMVC.head.meta(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="reload">JMVC.head.reload(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="title">JMVC.head.title(String title)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="title">The string You want to be set as document title</param>
			</params>
			<returns>the title if no param is passed</returns>
		</function>
	</head>



<!--

























	    _/           
	         _/_/    
	  _/  _/    _/   
	 _/  _/    _/    
	_/    _/_/     

###################
-->
	<io>
		<function>
			<signature name="post">JMVC.io.post(String uri, function cback, boolean sync, Object data, boolean cache)</signature>
			<description>Performs an ajax post call</description>
			<params>
				<param name="*uri">The resource to get</param>
				<param name="*cback">The function that will receive the response and will consume it</param>
				<param name="p" default="false">If true method will be POST</param>
				<param name="sync">If true the call will be synchronous</param>
			</params>
			<returns hint="the response">String</returns>
		</function>
		<function>
			<signature name="get">JMVC.io.get(String uri, function cback, boolean p, boolean sync)</signature>
			<description>Performs an ajax call</description>
			<params>
				<param name="*uri">The resource to get</param>
				<param name="*cback">The function that will receive the response and will consume it</param>
				<param name="p" default="false">If true method will be POST</param>
				<param name="sync">If true the call will be synchronous</param>
			</params>
			<returns hint="the response">String</returns>
		</function>
		<function>
			<signature name="getJson">JMVC.io.getJson(String uri)</signature>
			<description>Evaluate a json and return it</description>
			<params>
				<param name="uri">The resource to get</param>
			</params>
			<returns>The evaluated object or false</returns>
		</function>
		<function>
			<signature name="getXML">JMVC.io.getXML(String uri)</signature>
			<description>Evaluate a json and return it</description>
			<params>
				<param name="uri">The resource to get</param>
			</params>
			<returns>The evaluated object or false</returns>
		</function>
	</io>
<!--































                                                          
	                _/                _/                      
	     _/_/_/  _/_/_/_/  _/  _/_/      _/_/_/      _/_/_/   
	  _/_/        _/      _/_/      _/  _/    _/  _/    _/    
	     _/_/    _/      _/        _/  _/    _/  _/    _/     
	_/_/_/        _/_/  _/        _/  _/    _/    _/_/_/      
	                                                 _/       
	                                            _/_/
############################################################
-->
	<string>
		<function>
			<signature name="code2str">JMVC.string.code2str(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="htmlEntities">JMVC.string.htmlEntities(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="ltrim">JMVC.string.ltrim(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="multireplace">JMVC.string.multireplace(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="padme">JMVC.string.padme(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="replaceall">JMVC.string.replaceall(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="rtrim">JMVC.string.rtrim(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="str2code">JMVC.string.str2code(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="str_repeat">JMVC.string.str_repeat(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="trim">JMVC.string.trim(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
	</string>
<!--


















                                                         
	             _/        _/                        _/      
	    _/_/    _/_/_/          _/_/      _/_/_/  _/_/_/_/   
	 _/    _/  _/    _/  _/  _/_/_/_/  _/          _/        
	_/    _/  _/    _/  _/  _/        _/          _/         
	 _/_/    _/_/_/    _/    _/_/_/    _/_/_/      _/_/      
	                  _/                                     
	               _/                                       

############################################################
-->
	<object>
		<function>
			<signature name="clone">JMVC.object.clone(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="objCompare">JMVC.object.objCompare(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="objJCompare">JMVC.object.objJCompare(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="in_object">JMVC.object.in_object(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="obj2attr">JMVC.object.obj2attr(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="obj2css">JMVC.object.obj2css(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="obj2qs">JMVC.object.obj2qs(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
	</object>


<!--






















	                                                     
	    _/_/_/  _/  _/_/  _/  _/_/    _/_/_/  _/    _/   
	 _/    _/  _/_/      _/_/      _/    _/  _/    _/    
	_/    _/  _/        _/        _/    _/  _/    _/     
	 _/_/_/  _/        _/          _/_/_/    _/_/_/      
	                                            _/       
	                                       _/_/

######################################################
-->
	<array>
		<function>
			<signature name="array_clone">JMVC.array.array_clone(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>

		</function>
		<function>
			<signature name="coll2array">JMVC.array.coll2array(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<testlink>test_api_array_coll2array</testlink>
			<sample>&#10;
				ciao</sample>
		</function>
		<function>
			<signature name="in_array">JMVC.array.in_array(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<testlink>test_api_array_inarray</testlink>
		</function>
		<function>
			<signature name="inArrayRich">JMVC.array.inArrayRich(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<testlink>test_api_array_inarrayrich</testlink>
		</function>
	</array>
<!--

























	     

	               _/      _/  _/   
	  _/    _/  _/_/_/_/      _/    
	 _/    _/    _/      _/  _/     
	_/    _/    _/      _/  _/      
	 _/_/_/      _/_/  _/  _/     

##################################
-->
	<util>
		<function>
			<signature name="between">JMVC.util.between(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="defined">JMVC.util.defined(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="deg2rad">JMVC.util.deg2rad(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="extend">JMVC.util.extend(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="getParameters">JMVC.util.getParameters(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="getType">JMVC.util.getType(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="hex2int">JMVC.util.hex2int(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="int2hex">JMVC.util.int2hex(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="isArray">JMVC.util.isArray(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="extend">JMVC.util.extend(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="isObject">JMVC.util.isObject(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="isSet">JMVC.util.isSet(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="isTypeOf">JMVC.util.isTypeOf(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="now">JMVC.util.now(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="rad2deg">JMVC.util.rad2deg(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="range">JMVC.util.range(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
	</util>
	<!--
	<num>

		getNum : function (str) {return parseInt(str, 10); },
        getFloat : function (str) {return parseFloat(str, 10); },
        pFloat : function (f) {return 1 * f; },
        pInt : function (i) {return i >> 0; },
        mRound : function (n) {return (n + 0.5) >> 0; },
        mFloor : function (n) {(n > 0 ? n : n + 1) >> 0; },
        mCeil : function (n) {return (n + (n > 0 && !!(n % 1))) >> 0; },
        num : function (n) {return parseFloat(n.toFixed(10), 10); },
		<function>
			<signature name="post">JMVC.num.getNum(String num)</signature>
			<description>ParseInt a string (base 10)</description>
			<params>
				<param name="*num">The string to be parsed</param>
			</params>
			<returns hint="the response">An integer or NaN</returns>
		</function>
		<function>
			<signature name="sss">JMVC.io.post(String uri, function cback, boolean sync, Object data, boolean cache)</signature>
			<description>Performs an ajax post call</description>
			<params>
				<param name="*uri">The resource to get</param>
				<param name="*cback">The function that will receive the response and will consume it</param>
				<param name="p" default="false">If true method will be POST</param>
				<param name="sync">If true the call will be synchronous</param>
			</params>
			<returns hint="the response">String</returns>
		</function>
	</num>
	-->
</api>	
