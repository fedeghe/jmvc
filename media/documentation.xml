<?xml version="1.0"?>
<api>
	<jmvc>
		<function>
			<signature name="bind">JMVC.bind(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		
		<function>
			<signature name="check_hook">JMVC.bind(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>

		<function>
			<signature name="check_ns">JMVC.check_ns(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>

		<function>
			<signature name="console">JMVC.bind(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>

		<function>
			<signature name="debug">JMVC.bind(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="del">JMVC.del(String name)</signature>
			<description>Removes a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="each">JMVC.del(String name)</signature>
			<description>Removes a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="Event"></signature>
			<description></description>
			<params>
				<param name="*name"></param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="expose"></signature>
			<description></description>
			<params>
				<param name="*name"></param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="extend">JMVC.extend(String section, Literal extension)</signature>
			<description>Extends JMVC object with Your objects</description>
			<params>
				<param name="*section">	that parameter is needed to set the namespace under which Your functions will be added toJMVC, if You use `ajax` then all functions in the literal will be callable with JMVC.ajax.my_function(....)</param>
				<param name="*extension">this object literal defines all the functions in your extension (JMVC is in that scope, so You can use it)</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="factory">JMVC.extend(String section, Literal extension)</signature>
			<description>Extends JMVC object with Your objects</description>
			<params>
				<param name="*section">	that parameter is needed to set the namespace under which Your functions will be added toJMVC, if You use `ajax` then all functions in the literal will be callable with JMVC.ajax.my_function(....)</param>
				<param name="*extension">this object literal defines all the functions in your extension (JMVC is in that scope, so You can use it)</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="get">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="getModel">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="getNum">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="getView">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
		</function>
		<function>
			<signature name="globalize">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="hook">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="htmlspecialchars">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
		</function>
		<function>
			<signature name="inherit">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="interface">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="jeval">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
		</function>
		<function>
			<signature name="loadinterfaces">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="make_ns">JMVC.make_ns(str, obj, ctx)</signature>
			<description>Creates a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="mCeil">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
		</function>
		<function>
			<signature name="mFloor">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="mRound">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="noop">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
		</function>
		<function>
			<signature name="num">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="parselang">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="pFloat">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
		</function>
		<function>
			<signature name="pInt">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="promise">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
		</function>
		<function>
			<signature name="prototipize">JMVC.prototipize(Constructor func, Enanching Literal)</signature>
			<description>Allows to add properties and methods to the prototype of a constructor</description>
			<params>
				<param name="*unc">the constructor to be enanched</param>
				<param name="*name">the literal object that contains wanted properties and methods</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="purge">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<signature name="render">JMVC.prototipize(Constructor func, Enanching Literal)</signature>
			<description>Allows to add properties and methods to the prototype of a constructor</description>
			<params>
				<param name="*unc">the constructor to be enanched</param>
				<param name="*name">the literal object that contains wanted properties and methods</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="require">JMVC.require(String extension1, String extension2, ...)</signature>
			<description>Loads one or more extensions into the JMVC object</description>
			<params>
				<param name="*extension1">the name of the javascript file (must be in extensions folder) to be loaded. That file will use JMVC.extend function (see the `More` section)</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		
		<function>
			<signature name="set">JMVC.set(String name, String value)</signature>
			<description>Adds a variable that You can use anywhere</description>
			<params>
				<param name="*name">the name of the new variable, use it typing &#36;thename&#36;</param>
				<param name="*value">the value of the variable</param>
			</params>
			<returns>void (undefined)</returns>
		</function>

		<param>
			<name>W</name>
			<type>reference</type>
			<description>JMVC.W is a reference to th current window object</description>
		</param>
	</jmvc>	





	<model>	
		<function>
			<signature name="del">del(String varname)</signature>
			<description>If exists deletes a variable from the Model registry.</description>
			<params>
				<param name="*varname">the name of the variable to be deleted</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="get">get(String varname)</signature>
			<description>If exists retrieve a variable from the Model registry.</description>
			<params>
				<param name="*varname">the name of the variable needed</param>
			</params>
			<returns>the variable value if exists or false</returns>
		</function>
		<function>
			<signature name="reset">reset()</signature>
			<description>Deletes all variables from the Model registry.</description>
			<params>
				<param name="noparams">this function needs no parameters</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="set">set(String varname, Mixed value)</signature>
			<description>Add a variable to the Model registry.</description>
			<params>
				<param name="*varname">the name of the variable</param>
				<param name="*value">the value for the variable</param>
			</params>
			<returns>the model instance</returns>
		</function>
	</model>






	<view>
		<function>
			<signature name="del">del(String varname)</signature>
			<description>If exists deletes a variable from the View registry.</description>
			<params>
				<param name="*varname">the name of the variable to be deleted</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="get">get(String varname)</signature>
			<description>If exists retrieve a variable from the View registry.</description>
			<params>
				<param name="*varname">the name of the variable needed</param>
			</params>
			<returns>the variable value if exists or false</returns>
		</function>
		<function>
			<signature name="get_from_url">parse(Model object)</signature>
			<description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
			<params>
				<param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
			</params>
			<returns>the View instance (to access the content use .content attribute)</returns>
		</function>	
		<function>
			<signature name="parse">parse(Model object)</signature>
			<description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
			<params>
				<param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
			</params>
			<returns>the View instance (to access the content use .content attribute)</returns>
		</function>			
		<function>
			<signature name="render">render(Literal pars{Javascript function cback, Array argz, String target})</signature>
			<description>This is the function intended to be used to render the document or a part of it. You can optionally pass three elements within a literal object.</description>
			<params>
				<param name="cback">a callback function that will be executed after rendering</param>
				<param name="argz">an array of parameters that will be passed to the callback</param>
				<param name="target">the default target is document.body but if you pass a string containing the id attribute of an element that is in the\n\t\t\t\t\tDOM (set from previous render with the default target) the content will be set in that element.</param>
			</params>
			<returns>the View instance</returns>
		</function>
		<function>
			<signature name="set">set(String varname, Mixed value);</signature>
			<description>Add a variable to the View registry.</description>
			<params>
				<param name="*varname">the name of the variable</param>
				<param name="*value">the value for the variable</param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="set_from_url">parse(Model object)</signature>
			<description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
			<params>
				<param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
			</params>
			<returns>the View instance (to access the content use .content attribute)</returns>
		</function>
	</view>



	<controller>
		<function>
			<signature name="set">set(String varname, Mixed value)</signature>
			<description>Add a variable to the Controller registry.</description>
			<params>
				<param name="*varname">the name of the variable</param>
				<param name="*value">the value for the variable</param>
			</params>
			<returns>the controller instance</returns>
		</function>
		<function>
			<signature name="get">get(String varname)</signature>
			<description>If exists retrieve a variable from the Controller registry.</description>
			<params>
				<param name="*varname">the name of the variable needed</param>
			</params>
			<returns>the variable value if exists or false</returns>
		</function>
		<function>
			<signature name="del">del(String varname)</signature>
			<description>If exists deletes a variable from the Controller registry.</description>
			<params>
				<param name="*varname">the name of the variable to be deleted</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="reset">reset()</signature>
			<description>Deletes all variables from the Controller registry.</description>
			<params>
				<param name="no params">this function needs no parameters</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="relocate">relocate(String url, int ms)</signature>
			<description>Redirects to a specified location.</description>
			<params>
				<param name="*url">the location to be redirected to</param>
				<param name="ms" default="0">after how many ms</param>
			</params>
			<returns></returns>
		</function>
		<function>
			<signature name="render">render(String content, Javascript function callback)</signature>
			<description>Renders directly something from the controller, optionally invokes a callback at the end.</description>
			<params>
				<param name="*content">the content to render</param>
				<param name="callback">a function that will be invoked after content is set</param>
			</params>
			<returns>the Controller instance</returns>
		</function>
		<function>
			<signature name="addRoutes">addRoutes(Mixed var, String val)</signature>
			<description>Add action routes.</description>
			<params>
				<param name="*content">the content to render</param>
				<param name="callback">a function that will be invoked after content is set</param>
			</params>
			<returns>the Controller instance</returns>
		</function>
	</controller>



	<dom>
		<function>
			<signature name="append">JMVC.dom.append(Element where, Element what)</signature>
			<description>appends an DOM node inside another one</description>
			<params>
				<param name="*where">DOM target node</param>
				<param name="*what">DOM node to append</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="add">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="addClass">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="attr">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="clone">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="create">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="createNS">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="createText">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="body">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="create">JMVC.dom.create(String tag, Literal attrs,String inner)</signature>
			<description>creates a DOM node.</description>
			<params>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">txt content</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="find">JMVC.dom.find(String selector)</signature>
			<description>Finds a node by id (#id) a class (.class) or a tag (tag).</description>
			<params>
				<param name="*selector">the selector</param>
			</params>
			<returns>the found node or false</returns>
		</function>
		<function>
			<signature name="html">JMVC.dom.html(Element el, String html)</signature>
			<description>sets or returns the html into an existing element.</description>
			<params>
				<param name="*el">dom element target</param>
				<param name="html">html to set in target, otherwise gets it</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="insertBefore">JMVC.dom.insertBefore(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node before another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where prepend the sibling</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="insertAfter">JMVC.dom.insertAfter(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node after another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where postpend the sibling</param>
			</params>
			<returns>the brand new node</returns>
		</function>
		<function>
			<signature name="nthchild">JMVC.dom.nthchild(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
		</function>
	</dom>




	<events>
		<function>
			<signature name="bind">JMVC.events.bind(Element el, String type, Javascript function fun)</signature>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="unbind">JMVC.events.unbind(Element el, String type)</signature>
			<description>unbinds an existing binding</description>
			<params>
				<param name="*el">dom element target</param>
				<param name="*type">the event string</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="one">JMVC.events.one(Element el, String type, Javascript function fun)</signature>
			<description>binds only once a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="ready">JMVC.events.ready(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
		</function>
	</events>
	<head>
		<function>
			<signature name="addscript">JMVC.head.addscript(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a script in the head section</description>
			<params>
				<param name="*src">this can be the url of the script or the script content (you can even use \{\{myscript name=`hello` ... \{\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the script</param>
				<param name="explicit">set true if You mean to pass the script content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="addstyle">JMVC.head.addstyle(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
				<param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="title">JMVC.head.title(String title)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="title">The string You want to be set as document title</param>
			</params>
			<returns>the title if no param is passed</returns>
		</function>
		<function>
			<signature name="meta">JMVC.head.meta(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
	</head>




	<util>
		<!--
		OBJECT
		'clone'
		'objCompare' 
		'in_object'
		'obj2attr'
        'obj2css'
        'obj2qs'
		<function>
			<signature name="extend">JMVC.util.extend(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>

		ARRAY
		'array_clone'
		'coll2array'
		'inArray'
        'inArrayRich'
		
		HEAD
		'denyiXrame'
		'reload'

		UTIL
        'between'
        'defined'
        'deg2rad'
        'getType'
        'isArray'
        'isObject'
        'isSet'
        'isTypeOf'
        'rad2deg'
        'rand'
        'now'
        'range'
        'implement'
        'getParameters'
        'hex2int'
        'int2hex'

		STRING
		'padme'
		'trim'
        'ltrim'
        'rtrim'
		'str2code'
        'code2str'
        'replaceall'
        'htmlEntities'
        'str_repeat'
        'multireplace'
        
		-->
		
		<function>
			<signature name="htmlEntities">JMVC.string.htmlEntities(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<signature name="isSet">JMVC.util.isSet(var variable)</signature>
			<description>Checks if a variable is defined</description>
			<params>
				<param name="variable">The variable to check</param>
			</params>
			<returns>Boolean</returns>
		</function>
		<function>
			<signature name="isArray">JMVC.util.isArray(var variable)</signature>
			<description>Checks if a variable is an Array</description>
			<params>
				<param name="variable">The variable to check</param>
			</params>
			<returns>Boolean</returns>
		</function>
		<function>
			<signature name="inArray">JMVC.array.inArray(Array arr, var myvar)</signature>
			<description>Checks if an Array contains a variable</description>
			<params>
				<param name="arr">The array to search in</param>
				<param name="myvar">The variale to find</param>
			</params>
			<returns>Boolean</returns>
		</function>
		<function>
			<signature name="isTypeOf">JMVC.util.isTypeOf(var myvar, String type)</signature>
			<description>Checks if a variable is of a type</description>
			<params>
				<param name="myvar">The varbiale to check</param>
				<param name="type">The type to match</param>
			</params>
			<returns>Boolean</returns>
		</function>
		<function>
			<signature name="getType">JMVC.util.getType(var myvar)</signature>
			<description>Gets the type of a variable</description>
			<params>
				<param name="myvar">The target variable</param>
			</params>
			<returns hint="The type of the variable">String</returns>
		</function>
		<function>
			<signature name="rand">JMVC.util.rand(int n1, int n2)</signature>
			<description>Returns a pseudo-random value in [n1, n2]</description>
			<params>
				<param name="*n1">The minimum value</param>
				<param name="*n2">The maximum value</param>
			</params>
			<returns>int</returns>
		</function>
		<function>
			<signature name="replaceall">JMVC.string.replaceall(String tpl , Literal o, String pre, String post)</signature>
			<description>Replace many placeholders in a string</description>
			<params>
				<param name="*tpl">The template where placeholders must be replaced</param>
				<param name="*o">A literal containing as keys the placeholders inner value (%inner_value%) and as values the strings that must be used</param>
				<param name="pre" default="%">The string that precede the placeholder inner_value </param>
				<param name="post" default="%">The string that follows the inner_value</param>
			</params>
			<returns>The template with all values replaced</returns>
		</function>
		<function>
			<signature name="denyframe">JMVC.util.denyframe()</signature>
			<description>Replace many placeholders in a string</description>
			<params>
				<param name="no params">this function needs no parameters</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
	</util>
	<io>
		<function>
			<signature name="post">JMVC.io.post(String uri, function cback, boolean sync, Object data, boolean cache)</signature>
			<description>Performs an ajax post call</description>
			<params>
				<param name="*uri">The resource to get</param>
				<param name="*cback">The function that will receive the response and will consume it</param>
				<param name="p" default="false">If true method will be POST</param>
				<param name="sync">If true the call will be synchronous</param>
			</params>
			<returns hint="the response">String</returns>
		</function>
		<function>
			<signature name="get">JMVC.io.get(String uri, function cback, boolean p, boolean sync)</signature>
			<description>Performs an ajax call</description>
			<params>
				<param name="*uri">The resource to get</param>
				<param name="*cback">The function that will receive the response and will consume it</param>
				<param name="p" default="false">If true method will be POST</param>
				<param name="sync">If true the call will be synchronous</param>
			</params>
			<returns hint="the response">String</returns>
		</function>
		<function>
			<signature name="getJson">JMVC.io.getJson(String uri)</signature>
			<description>Evaluate a json and return it</description>
			<params>
				<param name="uri">The resource to get</param>
			</params>
			<returns>The evaluated object or false</returns>
		</function>
		<function>
			<signature name="getXML">JMVC.io.getXML(String uri)</signature>
			<description>Evaluate a json and return it</description>
			<params>
				<param name="uri">The resource to get</param>
			</params>
			<returns>The evaluated object or false</returns>
		</function>
	</io>
</api>	
