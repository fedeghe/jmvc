<?xml version="1.0"?>
<api>
<!--


                                                
         _/  _/      _/  _/      _/    _/_/_/   
        _/  _/_/  _/_/  _/      _/  _/          
       _/  _/  _/  _/  _/      _/  _/           
_/    _/  _/      _/    _/  _/    _/            
 _/_/    _/      _/      _/        _/_/_/       


-->

	<jmvc>
		<function>
			<signature name="console">JMVC.console()</signature>
			<description>Toggles html+css+js+preview console</description>
			<params>
				<param name="">this function needs no parameters</param>
			</params>
			<returns>void (undefined)</returns>
			<sample>JMVC.console();</sample>
			<status>testing</status>
		</function>

		<function>
			<signature name="debug">JMVC.debug(String name)</signature>
			<description>Debugs on console any element passed, degrading to the alert</description>
			<params>
				<param name="...">all parameters to be debugged</param>
			</params>
			<returns>void (undefined)</returns>
			<sample>&#10;
var arr = [1,2,3,4,5],&#10; 
	obj =  {name : "Federico", surname : "Ghedina", say : "WAT"},&#10;
	foo = function (){alert('foo'); };&#10;
JMVC.debug(arr, obj, foo);
</sample>
			<status>testing</status>
		</function>
		<function>
			<signature name="del">JMVC.del(String name)</signature>
			<description>Removes a variable from the global JMVC register</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>JMVC</returns>
			<sample>JMVC.set('a', 10);&#10;
var t = JMVC.get('a');&#10;
JMVC.del('a');
			</sample>
			<status>testing</status>
		</function>

		
		<function>
			<signature name="delegate">JMVC.delegate(Function func, Object obj)</signature>
			<description>Get a function with a delegated context</description>
			<params>
				<param name="*func">the function that must be binded to the object</param>
				<param name="*obj">the object where the function must be binded</param>
			</params>
			<returns>the function binded</returns>
			<sample>var y = {type:'literal'},&#10;
    t = JMVC.delegate(function(){console.debug(this.type);}, y);&#10;
t(); // literal&#10;</sample>
			<status>complete</status>
			<testlink>test_api_jmvc_delegate</testlink>
		</function>


		<function>
			<signature name="each">JMVC.each(obj, fn)</signature>
			<description>Loop over an object literal or Array, the callback at each cycle will receive the object and his index. As far as the callback has a name, the two `continue` and `break` function are available</description>
			<params>
				<param name="*obj">the object to loop Object literal or Array</param>
				<param name="*fn">the loop callback</param>
			</params>
			<returns>void (undefined)</returns>
			<sample>&#10;
var obj = {name:'Federico', surname : 'Ghedina', says : 'wat'},&#10;
	arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],&#10;
	objAfter = JMVC.each(obj, function (el, i) {&#10;
		console.debug(i, el);&#10;
	}),&#10;
	arrAfter = JMVC.each(arr, function f(el, i) {&#10;
		if (i % 2) { //will skip odd indexed elements&#10;
			f.continue();&#10;
		}&#10;
		return i;&#10;
	});&#10;
console.debug(obj, objAfter);&#10;
console.debug(arr, arrAfter);&#10;</sample>
			<status>testing</status>
			<testlink>test_api_jmvc_each</testlink>>
		</function>

		<function>
			<signature name="extend">JMVC.extend(String section, Literal extension)</signature>
			<description>Extends JMVC object with Your objects</description>
			<params>
				<param name="*section">	that parameter is needed to set the namespace under which Your functions will be added toJMVC; valid values are `foo` or even `foo1.foo2.foo3`</param>
				<param name="*extension">this object literal defines all the functions in your extension (JMVC is in that scope, so You can use it)</param>
			</params>
			<returns>void (undefined)</returns>
			<status>testing</status>
			<sample>JMVC.extend('fooWidget', {&#10;
	// if specified, will lock the extension&#10;
	// for any value returned but true&#10;
	initCheck : function () {&#10;
		return true;&#10;
	},&#10;
	// if specified, will be executed immediately&#10;
	init : function () {&#10;
		console.debug('init fooWidget');&#10;
	},&#10;
	// ... specify your methods&#10;
	start : function () { alert('doing foo'); }&#10;
	// ...&#10;
});&#10;
JMVC.fooWidget.start();
			</sample>
		</function>
		<function>
			<signature name="factory">JMVC.factory(String type, String name[, Array params])</signature>
			<description>Get a Model, View or Interface</description>
			<params>
				<param name="*type">specify the kind of object should be returned, accepted values area 'view', 'model', 'controller' and 'interface'</param>
				<param name="*name">the name for the object, that will be used in the xhr path</param>
				<param name="params">all parameters for the object constructor call</param>
			</params>
			<returns>the requested instance, or false</returns>
			<status>testing</status>
			<sample>var me = JMVC.factory('model', 'Persona', ['Federico', 35]);&#10;me.hello();</sample>
		</function>
		<function>
			<signature name="get">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be retrieved</param>
			</params>
			<returns>the variable reference or value if found, or undefined</returns>
			<sample>JMVC.set('a', 10);&#10;console.debug(JMVC.get('a'));</sample>
			<status>testing</status>
		</function>
		<function>
			<signature name="getModel">JMVC.getModel(String name [, Array params])</signature>
			<description>This is a shortcut call for the factory, with the first parameter preset to 'model'</description>
			<params>
				<param name="*name">the name of the model that should be returned, even on a subfolder</param>
				<param name="params">all parameters for the object constructor call</param>
			</params>
			<returns>the model instance, or false</returns>
			<status>testing</status>
			<sample>var me = JMVC.getModel('Persona', ['Federico', 35]);&#10;me.hello();</sample>
		</function>
		<function>
			<signature name="getView">JMVC.getView(String name)</signature>
			<description>This is a shortcut call for the factory, with the first parameter preset to 'view'</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance or false</returns>
			<status>testing</status>
			<sample>var me = JMVC.getView('foot');&#10;console.debug(me.content);</sample>
		</function>
		<function>
			<signature name="hook">JMVC.hook(ObjLit hooks [, boolean force])</signature>
			<description>That function allows to add a function to four inner predefined hook queues; it is possible to define through that method even new hooks and trigger execution anywhere in your code using the function hookCheck. Note that 'onBeforeRender', 'onAfterRender', 'onBeforeParse', 'onAfterParse' are existent inner hooks used at parse and render time.</description>
			<params>
				<param name="*hooks">the object literal containing hooked functions</param>
			</params>
			<returns>void (undefined)</returns>
			<status>testing</status>
			<sample>// INNER HOOK&#10;
JMVC.hook({'onAfterRender': function (){alert('You`ll never see that message booking that function from the console!!!'); }});&#10;
// USER DEFINED HOOK&#10;
function foo() {&#10;
	JMVC.hookCheck('myhook', [1,2,3]);&#10;
};&#10;
JMVC.hook({'myhook': function () {console.debug(arguments); }}, true);&#10;
foo();
			</sample>
		</function>
		<function>
			<signature name="hookCheck">JMVC.hookCheck(String hookname [, Array params])</signature>
			<description>That function is strictly coupled with the JMVC.hook function, triggering a named hook. As far as many functions can </description>
			<params>
				<param name="*hookname">the name of the hook queue that must be executed</param>
				<param name="params">parameters array for the hooked functions; chained, being a queue the first function specified will pass his returning values as parameters for the second function in the queue, an so on. The sample code clarifies.</param>
			</params>
			<returns>the variable reference or value</returns>
			<status>testing</status>
			<sample>function foo() {&#10;
	JMVC.hookCheck('myhook', [1,2,3]);&#10;
};&#10;
JMVC.hook({'myhook': function () {var a = Array.prototype.slice.call(arguments, 1); console.debug(a); return a; }}, true);&#10;
JMVC.hook({'myhook': function () {var a = Array.prototype.slice.call(arguments, 1); console.debug(a); return a; }}, true);&#10;
foo();
			</sample>
		</function>
		<function>
			<signature name="htmlspecialchars">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="implement">JMVC.implement(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="inherit">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="Interface">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="jeval">JMVC.getView(String name)</signature>
			<description>Gets a view instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the new view</param>
			</params>
			<returns>the view instance</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="lang">JMVC.lang(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="loadinterfaces">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="nsCheck">JMVC.nsCheck(String ns [,Object ctx])</signature>
			<description>Returns a namespace if exists</description>
			<params>
				<param name="*ns">The namespace to check, a String dot glued</param>
				<param name="ctx" default="Window">The root namespace</param>
			</params>
			<returns>namespace || false</returns>
			<sample>&#10;
var loaded_extensions = JMVC.nsCheck('extensions', JMVC),&#10;
	// or&#10; 
	loadedExtensions =  JMVC.nsCheck('JMVC.extensions'),&#10;
	foo = JMVC.nsCheck('foo', JMVC); //false
			</sample>
			<status>complete</status>
			<testlink>test_api_jmvc_checkns</testlink>
		</function>
		<function>
			<signature name="nsMake">JMVC.nsMake(str, obj, ctx)</signature>
			<description>Creates a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="parselang">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="preload">JMVC.preload(String url)</signature>
			<description>Appends a 1px square iframe to the body, loading the specified url (from the same origin), and removes it as far as the content is loaded</description>
			<params>
				<param name="*url">the url that must be loaded</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="promise">JMVC.get(String name)</signature>
			<description>Retrieves a variable from the global JMVC scope</description>
			<params>
				<param name="*name">the name of the new variable to be removed</param>
			</params>
			<returns>the variable reference or value</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="prototipize">JMVC.prototipize(Constructor func, Enanching Literal)</signature>
			<description>Allows to add properties and methods to the prototype of a constructor</description>
			<params>
				<param name="*unc">the constructor to be enanched</param>
				<param name="*name">the literal object that contains wanted properties and methods</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="purge">JMVC.getModel(String name)</signature>
			<description>Gets a model instance, even on a subfolder</description>
			<params>
				<param name="*name">the name of the model</param>
			</params>
			<returns>the model instance</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="render">JMVC.render(Constructor func, Enanching Literal)</signature>
			<description>Allows to add properties and methods to the prototype of a constructor</description>
			<params>
				<param name="*unc">the constructor to be enanched</param>
				<param name="*name">the literal object that contains wanted properties and methods</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="require">JMVC.require(String extension1, String extension2, ...)</signature>
			<description>Loads one or more extensions into the JMVC object</description>
			<params>
				<param name="*extension1">the name of the javascript file (must be in extensions folder) to be loaded. That file will use JMVC.extend function (see the `More` section)</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="set">JMVC.set(String name, String value)</signature>
			<description>Adds a variable that You can use anywhere</description>
			<params>
				<param name="*name">the name of the new variable, use it typing &#36;thename&#36;</param>
				<param name="*value">the value of the variable</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
			<sample>&#10;
JMVC.set('a', 10);&#10;
var t = JMVC.get('a');&#10;
JMVC.del('a');
			</sample>
		</function>

		<param>
			<name>W</name>
			<type>reference</type>
			<description>JMVC.W is a reference to th current window object</description>
		</param>
	</jmvc>	



















<!--
                                             _/                                      _/                                    
    _/_/_/    _/_/    _/_/_/      _/_/_/  _/_/_/_/  _/  _/_/  _/    _/    _/_/_/  _/_/_/_/    _/_/    _/  _/_/    _/_/_/   
 _/        _/    _/  _/    _/  _/_/        _/      _/_/      _/    _/  _/          _/      _/    _/  _/_/      _/_/        
_/        _/    _/  _/    _/      _/_/    _/      _/        _/    _/  _/          _/      _/    _/  _/            _/_/     
 _/_/_/    _/_/    _/    _/  _/_/_/        _/_/  _/          _/_/_/    _/_/_/      _/_/    _/_/    _/        _/_/_/
 
-->
	<constructors>
		<function>
			<signature name="Interface">JMVC.Interface(String name, String value)</signature>
			<description>Adds a variable that You can use anywhere</description>
			<params>
				<param name="*name">the name of the new variable, use it typing &#36;thename&#36;</param>
				<param name="*value">the value of the variable</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="Event">JMVC.Event(sender)</signature>
			<description>Event is a special constructor to get an Event object with an attach and notify method</description>
			<params>
				<param name="*sender">The sender object</param>
			</params>
			<returns>the breand new object</returns>
			<sample>&#10;
var list = {&#10;
    els : [],&#10;
    addedItem : new JMVC.Event(list),&#10;
    deletedItem : new JMVC.Event(list),&#10;
    add : function (s) {&#10;
        this.els.push(s) &amp;&amp;&#10;
        this.addedItem.notify({item : s});&#10;
    },&#10;
    del : function (i) {&#10;
        this.els.splice(i, 1) &amp;&amp;&#10;
        this.deletedItem.notify({index : i});&#10;
    }&#10;
};&#10;
list.addedItem.attach(function () {console.debug(arguments)});&#10;
list.deletedItem.attach(function () {console.debug(arguments)});&#10;
list.add('a');&#10;
list.add('b');&#10;
list.add('c');&#10;
list.del(1);&#10;
list.els;	</sample>
			<status>incomplete</status>
		</function>
	</constructors>























<!--























                                    _/            _/   
   _/_/_/  _/_/      _/_/      _/_/_/    _/_/    _/    
  _/    _/    _/  _/    _/  _/    _/  _/_/_/_/  _/     
 _/    _/    _/  _/    _/  _/    _/  _/        _/      
_/    _/    _/    _/_/      _/_/_/    _/_/_/  _/       

#####################################################
-->
	<model>	
		<function>
			<signature name="del">firma(String varname, ...)</signature>
			<description>here is the description</description>
			<params>
				<param name="*varname">explanation for that variable</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="get">get(String varname)</signature>
			<description>If exists retrieve a variable from the Model registry.</description>
			<params>
				<param name="*varname">the name of the variable needed</param>
			</params>
			<returns>the variable value if exists or false</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="reset">reset()</signature>
			<description>Deletes all variables from the Model registry.</description>
			<params>
				<param name="noparams">this function needs no parameters</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="set">set(String varname, Mixed value)</signature>
			<description>Add a variable to the Model registry.</description>
			<params>
				<param name="*varname">the name of the variable</param>
				<param name="*value">the value for the variable</param>
			</params>
			<returns>the model instance</returns>
			<status>incomplete</status>
		</function>
	</model>





<!--



















	                                                
	              _/                                
	 _/      _/        _/_/    _/      _/      _/   
	_/      _/  _/  _/_/_/_/  _/      _/      _/    
	 _/  _/    _/  _/          _/  _/  _/  _/       
	  _/      _/    _/_/_/      _/      _/          
	                                                
##################################################
-->
	<view>
		<function>
			<signature name="clone">clone(String varname)</signature>
			<description>If exists deletes a variable from the View registry.</description>
			<params>
				<param name="*varname">the name of the variable to be deleted</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="del">del(String varname)</signature>
			<description>If exists deletes a variable from the View registry.</description>
			<params>
				<param name="*varname">the name of the variable to be deleted</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="get">get(String varname)</signature>
			<description>If exists retrieve a variable from the View registry.</description>
			<params>
				<param name="*varname">the name of the variable needed</param>
			</params>
			<returns>the variable value if exists or false</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="getFromUrl">parse(Model object)</signature>
			<description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
			<params>
				<param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
			</params>
			<returns>the View instance (to access the content use .content attribute)</returns>
			<status>incomplete</status>
		</function>	
		<function>
			<signature name="parse">parse(Model object)</signature>
			<description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
			<params>
				<param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
			</params>
			<returns>the View instance (to access the content use .content attribute)</returns>
			<status>incomplete</status>
		</function>			
		<function>
			<signature name="render">render(Literal pars{Javascript function cback, Array argz, String target})</signature>
			<description>This is the function intended to be used to render the document or a part of it. You can optionally pass three elements within a literal object.</description>
			<params>
				<param name="cback">a callback function that will be executed after rendering</param>
				<param name="argz">an array of parameters that will be passed to the callback</param>
				<param name="target">the default target is document.body but if you pass a string containing the id attribute of an element that is in the\n\t\t\t\t\tDOM (set from previous render with the default target) the content will be set in that element.</param>
			</params>
			<returns>the View instance</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="set">set(String varname, Mixed value);</signature>
			<description>Add a variable to the View registry.</description>
			<params>
				<param name="*varname">the name of the variable</param>
				<param name="*value">the value for the variable</param>
			</params>
			<returns></returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="setFromUrl">parse(Model object)</signature>
			<description>If the view has some &#36;var&#36; placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
			<params>
				<param name="object">Is a Model instance which should contain variables that the view will render through placeholders substitution.</param>
			</params>
			<returns>the View instance (to access the content use .content attribute)</returns>
			<status>incomplete</status>
		</function>
	</view>
<!--



















                                   _/                          _/  _/    
    _/_/_/    _/_/    _/_/_/    _/_/_/_/  _/  _/_/    _/_/    _/  _/       _/_/    _/  _/_/
 _/        _/    _/  _/    _/    _/      _/_/      _/    _/  _/  _/     _/_/_/_/  _/_/
_/        _/    _/  _/    _/    _/      _/        _/    _/  _/  _/     _/        _/
 _/_/_/    _/_/    _/    _/      _/_/  _/          _/_/    _/  _/       _/_/_/  _/

##########################################################################################
-->
	<controller>
		<function>
			<signature name="set">set(String varname, Mixed value)</signature>
			<description>Add a variable to the Controller registry.</description>
			<params>
				<param name="*varname">the name of the variable</param>
				<param name="*value">the value for the variable</param>
			</params>
			<returns>the controller instance</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="get">get(String varname)</signature>
			<description>If exists retrieve a variable from the Controller registry.</description>
			<params>
				<param name="*varname">the name of the variable needed</param>
			</params>
			<returns>the variable value if exists or false</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="del">del(String varname)</signature>
			<description>If exists deletes a variable from the Controller registry.</description>
			<params>
				<param name="*varname">the name of the variable to be deleted</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="reset">reset()</signature>
			<description>Deletes all variables from the Controller registry.</description>
			<params>
				<param name="no params">this function needs no parameters</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="relocate">relocate(String url, int ms)</signature>
			<description>Redirects to a specified location.</description>
			<params>
				<param name="*url">the location to be redirected to</param>
				<param name="ms" default="0">after how many ms</param>
			</params>
			<returns></returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="render">render(String content, Javascript function callback)</signature>
			<description>Renders directly something from the controller, optionally invokes a callback at the end.</description>
			<params>
				<param name="*content">the content to render</param>
				<param name="callback">a function that will be invoked after content is set</param>
			</params>
			<returns>the Controller instance</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="addRoutes">addRoutes(Mixed var, String val)</signature>
			<description>Add action routes.</description>
			<params>
				<param name="*content">the content to render</param>
				<param name="callback">a function that will be invoked after content is set</param>
			</params>
			<returns>the Controller instance</returns>
			<status>incomplete</status>
		</function>
	</controller>


<!--




























	         _/                           
	    _/_/_/    _/_/    _/_/_/  _/_/    
	 _/    _/  _/    _/  _/    _/    _/   
	_/    _/  _/    _/  _/    _/    _/    
	 _/_/_/    _/_/    _/    _/    _/     

#######################################
-->
	<dom>

		<function>
			<signature name="add">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>

		<function>
			<signature name="addClass">JMVC.dom.addClass(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="append">JMVC.dom.append(Element where, Element what)</signature>
			<description>appends an DOM node inside another one</description>
			<params>
				<param name="*where">DOM target node</param>
				<param name="*what">DOM node to append</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="attr">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="body">JMVC.dom.body()</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="childs">JMVC.dom.childs(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="clone">JMVC.dom.clone(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="create">JMVC.dom.create(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="createText">JMVC.dom.cretaText(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="createNS">JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="empty">JMVC.dom.empty(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="find">JMVC.dom.find(Element where, String tag, Literal attrs, String inner)</signature>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param name="*where">dom element target</param>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">html content</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="findInnerByClass">JMVC.dom.findInnerByClass(String tag, Literal attrs,String inner)</signature>
			<description>creates a DOM node.</description>
			<params>
				<param name="*tag">tag to be created</param>
				<param name="attrs">object literal for attributes</param>
				<param name="inner">txt content</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="findByAttribute">JMVC.dom.findByAttribute(String selector)</signature>
			<description>Finds a node by id (#id) a class (.class) or a tag (tag).</description>
			<params>
				<param name="*selector">the selector</param>
			</params>
			<returns>the found node or false</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="hasAttribute">JMVC.dom.hasAttribute(String selector)</signature>
			<description>Finds a node by id (#id) a class (.class) or a tag (tag).</description>
			<params>
				<param name="*selector">the selector</param>
			</params>
			<returns>the found node or false</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="hasClass">JMVC.dom.hasClass(String selector)</signature>
			<description>Finds a node by id (#id) a class (.class) or a tag (tag).</description>
			<params>
				<param name="*selector">the selector</param>
			</params>
			<returns>the found node or false</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="html">JMVC.dom.html(Element el, String html)</signature>
			<description>sets or returns the html into an existing element.</description>
			<params>
				<param name="*el">dom element target</param>
				<param name="html">html to set in target, otherwise gets it</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="insertAfter">JMVC.dom.insertAfter(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node after another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where postpend the sibling</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="insertBefore">JMVC.dom.insertBefore(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node before another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where prepend the sibling</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="isElement">JMVC.dom.isElement(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node before another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where prepend the sibling</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="isNode">JMVC.dom.isNode(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node before another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where prepend the sibling</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="nodeTypeString">JMVC.dom.nodeTypeString(Element newNode, Element referenceNode)</signature>
			<description>inserts a sibling node before another one</description>
			<params>
				<param name="*newNode">the brand new node</param>
				<param name="*referenceNode">the existing node where prepend the sibling</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="nthchild">JMVC.dom.nthchild(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="preloadImage">JMVC.dom.preloadImage(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="parent">JMVC.dom.parent(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="prepend">JMVC.dom.prepend(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="remove">JMVC.dom.remove(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="removeAttribute">JMVC.dom.removeAttribute(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="removeClass">JMVC.dom.removeClass(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="switchClass">JMVC.dom.switchClass(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="val">JMVC.dom.val(Element node, int  num [, Array types ])</signature>
			<description>Get the n-th child of a given node; by default considers only TEXT_NODE types but You can specify any set</description>
			<params>
				<param name="node">The parent where search n-th child</param>
				<param name="num">Starting from 0 the number of the child needed</param>
				<param name="types" default="['TEXT_NODE']">An array containig the nodeTypes to consider</param>
			</params>
			<returns>the brand new node</returns>
			<status>incomplete</status>
		</function>
	</dom>
<!--
























                                               _/                
    _/_/    _/      _/    _/_/    _/_/_/    _/_/_/_/    _/_/_/   
 _/_/_/_/  _/      _/  _/_/_/_/  _/    _/    _/      _/_/        
_/          _/  _/    _/        _/    _/    _/          _/_/     
 _/_/_/      _/        _/_/_/  _/    _/      _/_/  _/_/_/        

###############################################################  
-->
	<events>
		<function>
			<signature name="bind">JMVC.events.bind(Element el, String type, Javascript function func)</signature>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="delay">JMVC.events.delay(Javascript function func, Integer ms)</signature>
			<description>Delay the execution of a function</description>
			<params>
				<param name="*func">Javascript function to be called</param>
				<param name="*ms">Milliseconds to delayed call</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="end">JMVC.events.end(Javascript function func)</signature>
			<description>add a function to the end render queue</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="endRender">JMVC.events.endrender()</signature>
			<description>executes the end render queue</description>
			<params>
				<param name="">no params</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>

		<function>
			<signature name="eventTarget">JMVC.events.eventTarget(Event e)</signature>
			<description>given an event sholud retrieve the original target for that event</description>
			<params>
				<param name="*e">the event</param>
			</params>
			<returns>DOM Element</returns>
			<status>incomplete</status>
		</function>

		<function>
			<signature name="getCoord">JMVC.events.getCoord(Element el, Event e)</signature>
			<description>given an element and a event, try to get event firing coordinates relative to the element</description>
			<params>
				<param name="*el">dom element target</param>
				<param name="*e">the event</param>
			</params>
			<returns>Array [x, y]</returns>
			<status>incomplete</status>
		</function>

		<function>
			<signature name="kill">JMVC.events.kill(Event e)</signature>
			<description>kills an event</description>
			<params>
				<param name="*e">the event</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="loadify">JMVC.events.loadify(Element el, String type, Javascript function fun)</signature>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="one">JMVC.events.one(Element el, String type, Javascript function fun)</signature>
			<description>binds only once a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="preventDefault">JMVC.events.preventDefault(Element el, String type, Javascript function fun)</signature>
			<description>binds only once a callback to an event fired from an element</description>
			<params>
				<param name="el*">dom element target</param>
				<param name="*type">the event string</param>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="ready">JMVC.events.ready(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="start">JMVC.events.start(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="scrollBy">JMVC.events.scrollBy(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="scrollTo">JMVC.events.scrollTo(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="startRender">JMVC.events.startrender(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="touch">JMVC.events.touch(Javascript function func)</signature>
			<description>binds a callback to document load event</description>
			<params>
				<param name="*func">Javascript function callback</param>
			</params>
			<returns></returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="unbind">JMVC.events.unbind(Element el, String type)</signature>
			<description>unbinds an existing binding</description>
			<params>
				<param name="*el">dom element target</param>
				<param name="*type">the event string</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
	</events>
<!--
































	                                             
    _/                                  _/
   _/_/_/      _/_/      _/_/_/    _/_/_/
  _/    _/  _/_/_/_/  _/    _/  _/    _/
 _/    _/  _/        _/    _/  _/    _/
_/    _/    _/_/_/    _/_/_/    _/_/_/

###############################################	                                             
-->
	<head>
		<function>
			<signature name="addscript">JMVC.head.addscript(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a script in the head section</description>
			<params>
				<param name="*src">this can be the url of the script or the script content (you can even use \{\{myscript name=`hello` ... \{\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the script</param>
				<param name="explicit">set true if You mean to pass the script content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="addstyle">JMVC.head.addstyle(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
				<param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="denyiXrame">JMVC.head.denyiXrame(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
				<param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="goto">JMVC.head.goto(String cnt, String act, String prms)</signature>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
				<param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="lastmodified">JMVC.head.lastmodified(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
				<param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="lib">JMVC.head.lib(String lib)</signature>
			<description>Loads an external library</description>
			<params>
				<param name="lib">Library name, now only 'jquery' is available (use CDN)</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
			<sample>JMVC.head.lib('jquery');</sample>
		</function>
		<function>
			<signature name="link">JMVC.head.link(String src, Boolean parse, Boolean explicit)</signature>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param name="*src">this can be the url of the stylesheet or the stylesheet content (you can even use \{\{mystyle color=`#ff33cc` ... \}\} )</param>
				<param name="parse">set true if You mean to use JMVC.vars variables placeholders in the stylesheet</param>
				<param name="explicit">set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="meta">JMVC.head.meta(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="reload">JMVC.head.reload(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="title">JMVC.head.title(String title)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="title">The string You want to be set as document title</param>
			</params>
			<returns>the title if no param is passed</returns>
			<status>incomplete</status>
		</function>
	</head>



<!--

























	    _/           
	         _/_/    
	  _/  _/    _/   
	 _/  _/    _/    
	_/    _/_/     

###################
-->
	<io>
		<function>
			<signature name="post">JMVC.io.post(String uri, function cback, boolean sync, Object data, boolean cache)</signature>
			<description>Performs an ajax post call</description>
			<params>
				<param name="*uri">The resource to get</param>
				<param name="*cback">The function that will receive the response and will consume it</param>
				<param name="p" default="false">If true method will be POST</param>
				<param name="sync">If true the call will be synchronous</param>
			</params>
			<returns hint="the response">String</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="get">JMVC.io.get(String uri, function cback, boolean p, boolean sync)</signature>
			<description>Performs an ajax call</description>
			<params>
				<param name="*uri">The resource to get</param>
				<param name="*cback">The function that will receive the response and will consume it</param>
				<param name="p" default="false">If true method will be POST</param>
				<param name="sync">If true the call will be synchronous</param>
			</params>
			<status>incomplete</status>
			<returns hint="the response">String</returns>
		</function>
		<function>
			<signature name="getJson">JMVC.io.getJson(String uri)</signature>
			<description>Evaluate a json and return it</description>
			<params>
				<param name="uri">The resource to get</param>
			</params>
			<returns>The evaluated object or false</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="getXML">JMVC.io.getXML(String uri)</signature>
			<description>Evaluate a json and return it</description>
			<params>
				<param name="uri">The resource to get</param>
			</params>
			<returns>The evaluated object or false</returns>
			<status>incomplete</status>
		</function>
	</io>
<!--































                                                          
	                _/                _/                      
	     _/_/_/  _/_/_/_/  _/  _/_/      _/_/_/      _/_/_/   
	  _/_/        _/      _/_/      _/  _/    _/  _/    _/    
	     _/_/    _/      _/        _/  _/    _/  _/    _/     
	_/_/_/        _/_/  _/        _/  _/    _/    _/_/_/      
	                                                 _/       
	                                            _/_/
############################################################
-->
	<string>
		<function>
			<signature name="code2str">JMVC.string.code2str(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="htmlEntities">JMVC.string.htmlEntities(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="ltrim">JMVC.string.ltrim(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="multireplace">JMVC.string.multireplace(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="padme">JMVC.string.padme(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="replaceall">JMVC.string.replaceall(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="rtrim">JMVC.string.rtrim(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="str2code">JMVC.string.str2code(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="strRepeat">JMVC.string.strRepeat(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="trim">JMVC.string.trim(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
	</string>
<!--


















                                                         
	             _/        _/                        _/      
	    _/_/    _/_/_/          _/_/      _/_/_/  _/_/_/_/   
	 _/    _/  _/    _/  _/  _/_/_/_/  _/          _/        
	_/    _/  _/    _/  _/  _/        _/          _/         
	 _/_/    _/_/_/    _/    _/_/_/    _/_/_/      _/_/      
	                  _/                                     
	               _/                                       

############################################################
-->
	<object>
		<function>
			<signature name="clone">JMVC.object.clone(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="objCompare">JMVC.object.objCompare(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="objJCompare">JMVC.object.objJCompare(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="inObject">JMVC.object.inObject(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="obj2attr">JMVC.object.obj2attr(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="obj2css">JMVC.object.obj2css(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="obj2qs">JMVC.object.obj2qs(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
	</object>


<!--






















	                                                     
	    _/_/_/  _/  _/_/  _/  _/_/    _/_/_/  _/    _/   
	 _/    _/  _/_/      _/_/      _/    _/  _/    _/    
	_/    _/  _/        _/        _/    _/  _/    _/     
	 _/_/_/  _/        _/          _/_/_/    _/_/_/      
	                                            _/       
	                                       _/_/

######################################################
-->
	<array>
		<function>
			<signature name="arrayClone">JMVC.array.arrayClone(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>

		</function>
		<function>
			<signature name="coll2array">JMVC.array.coll2array(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<testlink>test_api_array_coll2array</testlink>
			<sample>&#10;
				ciao</sample>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="inArray">JMVC.array.inArray(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<testlink>test_api_array_inarray</testlink>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="inArrayRich">JMVC.array.inArrayRich(String name, String value)</signature>
			<description>Gets/sets document title</description>
			<params>
				<param name="name">The name of the meta You want to add</param>
				<param name="value">The value of the meta You want to add</param>
			</params>
			<returns>void (undefined)</returns>
			<testlink>test_api_array_inarrayrich</testlink>
			<status>incomplete</status>
		</function>
	</array>
<!--

























	     

	               _/      _/  _/   
	  _/    _/  _/_/_/_/      _/    
	 _/    _/    _/      _/  _/     
	_/    _/    _/      _/  _/      
	 _/_/_/      _/_/  _/  _/     

##################################
-->
	<util>
		<function>
			<signature name="deg2rad">JMVC.util.deg2rad(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="extend">JMVC.util.extend(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="getParameters">JMVC.util.getParameters(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="getType">JMVC.util.getType(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="hex2int">JMVC.util.hex2int(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="int2hex">JMVC.util.int2hex(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="isArray">JMVC.util.isArray(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="extend">JMVC.util.extend(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="isObject">JMVC.util.isObject(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="isSet">JMVC.util.isSet(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="isTypeOf">JMVC.util.isTypeOf(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="now">JMVC.util.now(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		
		<function>
			<signature name="rad2deg">JMVC.util.rad2deg(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
		<function>
			<signature name="range">JMVC.util.range(str, obj, ctx)</signature>
			<description>Check a namspace</description>
			<params>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
				<param name="name">The variable to check</param>
			</params>
			<returns>void (undefined)</returns>
			<status>incomplete</status>
		</function>
	</util>
	<!--
	<num>

		getNum : function (str) {return parseInt(str, 10); },
        getFloat : function (str) {return parseFloat(str, 10); },
        pFloat : function (f) {return 1 * f; },
        pInt : function (i) {return i >> 0; },
        mRound : function (n) {return (n + 0.5) >> 0; },
        mFloor : function (n) {(n > 0 ? n : n + 1) >> 0; },
        mCeil : function (n) {return (n + (n > 0 && !!(n % 1))) >> 0; },
        num : function (n) {return parseFloat(n.toFixed(10), 10); },
		<function>
			<signature name="post">JMVC.num.getNum(String num)</signature>
			<description>ParseInt a string (base 10)</description>
			<params>
				<param name="*num">The string to be parsed</param>
			</params>
			<returns hint="the response">An integer or NaN</returns>
		</function>
		<function>
			<signature name="sss">JMVC.io.post(String uri, function cback, boolean sync, Object data, boolean cache)</signature>
			<description>Performs an ajax post call</description>
			<params>
				<param name="*uri">The resource to get</param>
				<param name="*cback">The function that will receive the response and will consume it</param>
				<param name="p" default="false">If true method will be POST</param>
				<param name="sync">If true the call will be synchronous</param>
			</params>
			<returns hint="the response">String</returns>
		</function>
	</num>
	-->


	<!--
	                                _/                _/       
	   _/_/_/  _/_/      _/_/_/  _/_/_/_/    _/_/_/  _/_/_/    
	  _/    _/    _/  _/    _/    _/      _/        _/    _/   
	 _/    _/    _/  _/    _/    _/      _/        _/    _/    
	_/    _/    _/    _/_/_/      _/_/    _/_/_/  _/    _/ 
	-->
	<match>
		<function>
			<signature name="email">JMVC.match.email(String email)</signature>
			<description>Check if a the passed string represents a valid email</description>
			<params>
				<param name="email*">The string email that must be checked</param>
			</params>
			<returns>boolean</returns>
			<sample>var t = JMVC.match.email('fedeghe@gmail.com');</sample>
			<status>incomplete</status>
			<testlink></testlink>
			
		</function>
		<function>
			<signature name="url">JMVC.match.url(String url)</signature>
			<description>Check if a the passed string represents a valid url</description>
			<params>
				<param name="url*">The string url that must be checked</param>
			</params>
			<returns>boolean</returns>
			<sample>var t = JMVC.match.url('http://www.jmvc.org?map=true');</sample>
			<status>incomplete</status>
			<testlink></testlink>
			
		</function>
	</match>
</api>	
