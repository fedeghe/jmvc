<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet href="$baseurl$/media/css/info.css" title="Modern" media="screen" type="text/css"?>
<doc>
	
	<functions name="Model">
		<function>
			<func>set(String varname, Mixed value)</func>
			<description>Add a variable to the Model registry.</description>
			<params>
				<param>
					<name>*varname</name>
					<desc>the name of the variable</desc>
				</param>
				<param>
					<name>*value</name>
					<desc> the value for the variable</desc>
				</param>
			</params>
			<returns>the model instance</returns>
		</function>
		<function>
			<func>get(String varname)</func>
			<description>If exists retrieve a variable from the Model registry.</description>
			<params>
				<param>
					<name>*varname</name>
					<desc>the name of the variable needed</desc>
				</param>
			</params>
			<returns>the variable value if exists or false</returns>
		</function>
		<function>
			<func>del(String varname)</func>
			<description>If exists deletes a variable from the Model registry.</description>
			<params>
				<param>
					<name>*varname</name>
					<desc>the name of the variable to be deleted</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<func>reset();</func>
			<description>Deletes all variables from the Model registry.</description>
			<params>
				<param>
					<name>no params</name>
					<desc>this function needs no parameters</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>		
	</functions>
	
	
	<functions name="View">
		<function>
			<func>set(String varname, Mixed value);</func>
			<description>Add a variable to the View registry.</description>
			<params>
				<param>
					<name>*varname</name>
					<desc>the name of the variable</desc>
				</param>
				<param>
					<name>*value</name>
					<desc>the value for the variable</desc>
				</param>
			</params>
			<returns>the View instance</returns>
		</function>
		<function>
			<func>get(String varname);</func>
			<description>If exists retrieve a variable from the View registry.</description>
			<params>
				<param>
					<name>*varname</name>
					<desc>the name of the variable needed</desc>
				</param>
			</params>
			<returns>the variable value if exists or false</returns>
		</function>
		<function>
			<func>del(String varname);</func>
			<description>If exists deletes a variable from the View registry.</description>
			<params>
				<param>
					<name>*varname</name>
					<desc>the name of the variable to be deleted</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<func>parse(Model object);</func>
			<description>If the view has some $var$ placeholders within and these variables are stored in a model instance with the right names, that method get values from model instance and uses them in the placeholders content substitution.</description>
			<params>
				<param>
					<name>object</name>
					<desc>Is a Model instance which should contain variables that the view will render through placeholders substitution.</desc>
				</param>
			</params>
			<returns>the View instance (to access the content use .content attribute)</returns>
		</function>
		<function>
			<func>render(Literal pars{Javascript function cback, Array argz, String target})</func>
			<description>This is the function intended to be used to render the document or a part of it. You can optionally pass three elements within a literal object.</description>
			<params>
				<param>
					<name>cback</name>
					<desc>a callback function that will be executed after rendering</desc>
				</param>
				<param>
					<name>argz</name>
					<desc>an array of parameters that will be passed to the callback</desc>
				</param>
				<param>
					<name>target</name>
					<desc>the default target is document.body but if you pass a string containing the id attribute of an element that is in the
					DOM (set from previous render with the default target) the content will be set in that element.</desc>
				</param>
			</params>
			<returns>the View instance</returns>
		</function>
		<function>
			<func>set_from_url(String vname, String alt)</func>
			<description>All extra parameters are automatically added into the Controller register, so if You plan to use one of these values in a view You should do something like:
				myview.set('myvar', this.get('myvar')); and manage fallback values; that function do that for You 
			</description>
			<params>
				<param>
					<name>*vname</name>
					<desc>the name of the variable You plan to be in extra params</desc>
				</param>
				<param>
					<name>alt</name>
					<desc>an alternative String in case vname is not found in extra params (otherwise You'll see `false`)</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
	</functions>	
	
	
	<functions name="Controller">
		<function>
			<func>set(String varname, Mixed value); </func>
			<description>Add a variable to the Controller registry.</description>
			<params>
				<param>
					<name>*varname</name>
					<desc>the name of the variable</desc>
				</param>
				<param>
					<name>*value</name>
					<desc>the value for the variable</desc>
				</param>
			</params>
			<returns>the controller instance</returns>
		</function>
		<function>
			<func>get(String varname);</func>
			<description>If exists retrieve a variable from the Controller registry.</description>
			<params>
				<param>
					<name>*varname</name>
					<desc>the name of the variable needed</desc>
				</param>
			</params>
			<returns>the variable value if exists or false</returns>
		</function>
		<function>
			<func>del(String varname);</func>
			<description>If exists deletes a variable from the Controller registry.</description>
			<params>
				<param>
					<name>*varname</name>
					<desc>the name of the variable to be deleted</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<func>reset();</func>
			<description>Deletes all variables from the Controller registry.</description>
			<params>
				<param>
					<name>no params</name>
					<desc>this function needs no parameters</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<func>relocate(uri location, int ms);</func>
			<description>Redirects to a specified location.</description>
			<params>
				<param>
					<name>*uri</name>
					<desc>the location to be redirected to</desc>
				</param>
				<param>
					<name>*ms</name>
					<desc>after how many ms (default is 0)</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
		<function>
			<func>render(String content, Javascript function callback);</func>
			<description>Renders directly something from the controller, optionally invokes a callback at the end.</description>
			<params>
				<param>
					<name>*content</name>
					<desc>the content to render</desc>
				</param>
				<param>
					<name>callback</name>
					<desc>a function that will be invoked after content is set</desc>
				</param>
			</params>
			<returns>the Controller instance</returns>
		</function>
		<function>
			<func>require(String extension1, String extension2, ...);</func>
			<description>Loads one or more extensions into the JMVC object</description>
			<params>
				<param>
					<name>*extension1</name>
					<desc>the name of the javascript file (must be in extensions folder) to be loaded. That file will use JMVC.extend function (see the `More` section)</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
	</functions>
	
	

	
	
	
	
	

	
	
	<functions name="Dom">
		<function>
			<func>JMVC.dom.create(String tag, Literal attrs,String inner)</func>
			<description>try to create an html element.</description>
			<params>
				<param>
					<name>*tag</name>
					<desc>tag to be created</desc>
				</param>
				<param>
					<name>attrs</name>
					<desc>object literal for attributes</desc>
				</param>
				<param>
					<name>inner</name>
					<desc>html content</desc>
				</param>
			</params>
			<returns>the brand new tag</returns>
		</function>
		<function>
			<func>JMVC.dom.append(Element where, Element what)</func>
			<description>append an element inside another one</description>
			<params>
				<param>
					<name>*where</name>
					<desc>dom element target</desc>
				</param>
				<param>
					<name>*what</name>
					<desc>dom element to append</desc>
				</param>
			</params>
			<returns>void</returns>
		</function>
		<function>
			<func>JMVC.dom.add(Element where, String tag, Literal attrs, String inner)</func>
			<description>this is a shortcut that merges create+append</description>
			<params>
				<param>
					<name>*where</name>
					<desc>dom element target</desc>
				</param>
				<param>
					<name>*tag</name>
					<desc>tag to be created</desc>
				</param>
				<param>
					<name>attrs</name>
					<desc>object literal for attributes</desc>
				</param>
				<param>
					<name>inner</name>
					<desc>html content</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>	
		<function>
			<func>JMVC.dom.html(Element el, String html)</func>
			<description>sets or returns the html into an existing element.</description>
			<params>
				<param>
					<name>*el</name>
					<desc>dom element target</desc>
				</param>
				<param>
					<name>html</name>
					<desc>html to set in target, otherwise gets it</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>			
	</functions>
	
	
	<functions name="Events">
		
		<function>
			<func>JMVC.events.bind(Element el, String type, Javascript function fun)</func>
			<description>binds a callback to an event fired from an element</description>
			<params>
				<param>
					<name>*el</name>
					<desc>dom element target</desc>
				</param>
				
				<param>
					<name>*type</name>
					<desc>the event</desc>
				</param>
				<param>
					<name>*func</name>
					<desc>Javascript function callback</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>	
		<function>
			<func>JMVC.events.unbind(Element el, String type)</func>
			<description>unbinds an existing binding</description>
			<params>
				<param>
					<name>*el</name>
					<desc>dom element target</desc>
				</param>				
				<param>
					<name>*type</name>
					<desc>the event</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>	
				
		<function>
			<func>JMVC.events.one(Element el, String type, Javascript function fun)</func>
			<description>binds only once a callback to an event fired from an element</description>
			<params>
				<param>
					<name>*el</name>
					<desc>dom element target</desc>
				</param>
				
				<param>
					<name>*type</name>
					<desc>the event</desc>
				</param>
				<param>
					<name>*func</name>
					<desc>Javascript function callback</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>	
		<function>
			<func>JMVC.events.ready(Javascript function func)</func>
			<description>binds a callback to document load event</description>
			<params>
				<param>
					<name>*func</name>
					<desc>Javascript function callback</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>	
	</functions>	
	
	
	
	<functions name="Head">
		<function>
			<func>JMVC.head.addscript(String src, Boolean parse, Boolean explicit)</func>
			<description>Add a script in the head section</description>
			<params>
				<param>
					<name>*src</name>
					<desc>this can be the url of the script or the script content (you can even use &#123;&#123;myscript name=`hello` ... &#125;&#125; )</desc>
				</param>
				
				<param>
					<name>parse</name>
					<desc>set true if You mean to use JMVC.vars variables placeholders in the script</desc>
				</param>
				<param>
					<name>explicit</name>
					<desc>set true if You mean to pass the script content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>	
		<function>
			<func>JMVC.head.addstyle(String src, Boolean parse, Boolean explicit)</func>
			<description>Add a stylesheet in the head section</description>
			<params>
				<param>
					<name>*src</name>
					<desc>this can be the url of the stylesheet or the stylesheet content (you can even use &#123;&#123;mystyle color=`#ff33cc` ... &#125;&#125; )</desc>
				</param>
				
				<param>
					<name>parse</name>
					<desc>set true if You mean to use JMVC.vars variables placeholders in the stylesheet</desc>
				</param>
				<param>
					<name>explicit</name>
					<desc>set true if You mean to pass the stylesheet content or a view placeholder in the src (even with on-the-fly variables), in that case 'parse' argument will be considered as true in any case</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>	
				
		<function>
			<func>JMVC.head.title(String title)</func>
			<description>Gets/sets document title</description>
			<params>
				<param>
					<name>title</name>
					<desc>The string You want to be set as document title</desc>
				</param>
			</params>
			<returns>the title if no param is passed</returns>
		</function>
	</functions>	
	
	
	<functions name="More">
		<function>
			<func>JMVC.extend(String section, Literal extension)</func>
			<description>Extends JMVC object with Your methods</description>
			<params>
				<param>
					<name>*section</name>
					<desc>that parameter is needed to set the namespace under which Your functions will be added toJMVC, if You use `ajax` then all functions in the literal will be callable with JMVC.ajax.my_function(....)</desc>
				</param>
				<param>
					<name>*extension</name>
					<desc>this object literal defines all the functions in your extension (JMVC is in that scope, so You can use it)</desc>
				</param>
			</params>
			<returns>void (undefined)</returns>
		</function>
	</functions>	
	
	
</doc>

	